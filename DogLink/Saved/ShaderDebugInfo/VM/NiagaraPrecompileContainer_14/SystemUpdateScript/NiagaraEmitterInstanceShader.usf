#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_SystemState_LoopDelay;
	float Constants_SystemState_LoopDuration;
	float Constants_euhe_EmitterState_LoopDuration;
	float Constants_euhe_EmitterState_LoopDelay;
	float Constants_euhe_SpawnRate_SpawnRate;
	int Constants_euhe_SpawnRate_SpawnGroup;
	float Constants_euhe_SpawnRate_SpawnProbability;
	float Constants_euhe_SpawnBurst_Instantaneous_SpawnTime;
	int Constants_euhe_SpawnBurst_Instantaneous_SpawnGroup;
	float Constants_euhe_SpawnBurst_Instantaneous_SpawnProbability;
	int Constants_euhe_SpawnBurst_Instantaneous_SpawnCount;
	int Emitter_RandomSeed;
}

struct FParamMap0_User_euhe
{
	int RandomSeed;
};

struct FParamMap0_User
{
	FParamMap0_User_euhe euhe;
};

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	int ScalabilityExecutionState;
	bool SpawningbCanEverSpawn;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SystemState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnRate;
};

struct FParamMap0_SpawnBurst_Instantaneous
{
	float Age;
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSize
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float2 SpriteSize;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SystemState
{
	bool LoopCountIncreased;
};

struct FParamMap0_Local_SpawnRate
{
	float InterpStartDT;
	float IntervalDT;
	int SpawnCount;
	float SpawnRate;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_AddVelocityInCone
{
	float3 ConeVector;
	float DotBetweenConeVectorAndAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnRate SpawnRate;
	FParamMap0_Local_SystemState SystemState;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_euhe_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_euhe_SpawnBurst_Instantaneous
{
	NiagaraSpawnInfo SpawnBurst;
};

struct FParamMap0_euhe_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_euhe
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_euhe_Scalability Scalability;
	FParamMap0_euhe_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_euhe_SpawnRate SpawnRate;
};

struct FParamMap0_Engine_System
{
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
};

struct FParamMap0_Engine_euhe
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	FParamMap0_Engine_euhe euhe;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_SystemState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_euhe_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnRate;
};

struct FParamMap0_Constants_euhe_SpawnBurst_Instantaneous
{
	int SpawnCount;
	int SpawnGroup;
	float SpawnProbability;
	float SpawnTime;
};

struct FParamMap0_Constants_euhe_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_euhe
{
	FParamMap0_Constants_euhe_EmitterState EmitterState;
	FParamMap0_Constants_euhe_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_Constants_euhe_SpawnRate SpawnRate;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_euhe euhe;
	FParamMap0_Constants_SystemState SystemState;
};

struct FParamMap0_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	int ConeAxisCoordinateSpace;
	bool UseVelocityFalloffOnConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0
{
	FParamMap0_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_Engine Engine;
	FParamMap0_euhe euhe;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SpawnBurst_Instantaneous SpawnBurst_Instantaneous;
	FParamMap0_SpawnRate SpawnRate;
	FParamMap0_System System;
	FParamMap0_SystemState SystemState;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
	FParamMap0_User User;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_euhe_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState_euhe_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_euhe_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_euhe_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_euhe_Func_(inout FSimulationContext Context);
void SpawnRate_euhe_Func_(inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void SpawnBurst_Instantaneous_euhe_Func_(inout FSimulationContext Context);
void euhe_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result11 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result12 = In_Condition && Result11;
	int ENiagaraExecutionState_IfResult;
	int ENiagaraExecutionStateSource_IfResult;
	if(Result12)
	{
	ENiagaraExecutionState_IfResult = In_NewState;
	ENiagaraExecutionStateSource_IfResult = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult;
}

void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result13 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result14 = In_Condition && Result13;
	int ENiagaraExecutionState_IfResult1;
	int ENiagaraExecutionStateSource_IfResult1;
	if(Result14)
	{
	ENiagaraExecutionState_IfResult1 = In_NewState;
	ENiagaraExecutionStateSource_IfResult1 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult1 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult1 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult1;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult1;
}

void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result16 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result17 = In_Condition && Result16;
	int ENiagaraExecutionState_IfResult2;
	int ENiagaraExecutionStateSource_IfResult2;
	if(Result17)
	{
	ENiagaraExecutionState_IfResult2 = In_NewState;
	ENiagaraExecutionStateSource_IfResult2 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult2 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult2 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult2;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult2;
}

void SystemState_Func_(inout FSimulationContext Context)
{
	float Constant3 = 0;
	bool Result = NiagaraAll(Context.Map.System.Age == Constant3);
	float Constant4 = 0.016667;
	float Result1 = max(Context.Map.Constants.SystemState.LoopDuration, Constant4);
	float Duration_IfResult;
	if(Result)
	{
	Duration_IfResult = Result1;
	}
	else
	{
	Duration_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float Constant5 = 0;
	Context.Map.System.CurrentLoopDuration = Duration_IfResult;
	Context.Map.SystemState.LoopDelay = Constant5;
	float Result2 = Context.Map.System.Age + Context.Map.Engine.DeltaTime;
	float Result3 = Context.Map.Engine.DeltaTime + Context.Map.System.LoopedAge;
	float Result4 = Result3 / Context.Map.System.CurrentLoopDuration;
	int Count;
	Count = Result4;
	int Constant6 = 0;
	int Result5 = max(Count, Constant6);
	float Result6 = Result5 * Context.Map.System.CurrentLoopDuration;
	float Result7 = Result3 - Result6;
	int Constant7 = 0;
	bool Result8 = NiagaraAll(Result5 > Constant7);
	int Result9 = Result5 + Context.Map.System.LoopCount;
	Context.Map.System.Age = Result2;
	Context.Map.System.LoopedAge = Result7;
	Context.Map.Local.SystemState.LoopCountIncreased = Result8;
	Context.Map.System.LoopCount = Result9;
	float float_IfResult;
	if(Context.Map.SystemState.RecalculateDurationEachLoop)
	{
	float_IfResult = Context.Map.Constants.SystemState.LoopDuration;
	}
	else
	{
	float_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult;
	float LoopedAge_IfResult;
	if(Context.Map.Local.SystemState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult = float_IfResult;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult = Context.Map.System.CurrentLoopDuration;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	Context.Map.System.CurrentLoopDuration = CurrentLoopDuration_IfResult;
	Context.Map.System.LoopedAge = LoopedAge_IfResult;
	float Result10 = Context.Map.System.LoopedAge / Context.Map.System.CurrentLoopDuration;
	Context.Map.System.NormalizedLoopAge = Result10;
	bool Constant8 = true;
	int Constant9 = 0;
	SystemState_SystemChangeState002_Func_(Context.Map.Transient.ScalabilityExecutionState, Constant8, Constant9, Context);
	int Constant10 = 3;
	bool Constant11 = false;
	int Constant12 = 3;
	SystemState_SystemChangeState_Func_(Constant10, Constant11, Constant12, Context);
	bool Constant13 = true;
	Context.Map.System.bCompleteOnInactive = Constant13;
	int Constant14 = 0;
	bool Result15 = NiagaraAll(Context.Map.Engine.Owner.ExecutionState != Constant14);
	int Constant15 = 2;
	SystemState_SystemChangeState001_Func_(Context.Map.Engine.Owner.ExecutionState, Result15, Constant15, Context);
}

void EmitterState_EmitterChangeState002_euhe_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant26 = 3;
	bool Result27 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant26);
	int Constant27 = 4;
	bool Result28 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant27);
	bool Result29 = Result27 && Result28;
	bool Result30 = In_Condition && Result29;
	bool Result31 = NiagaraAll(Context.Map.euhe.ExecutionStateSource <= In_NewStateSource);
	bool Result32 = Result30 && Result31;
	int ENiagaraExecutionState_IfResult3;
	int ENiagaraExecutionStateSource_IfResult3;
	if(Result32)
	{
	ENiagaraExecutionState_IfResult3 = In_NewState;
	ENiagaraExecutionStateSource_IfResult3 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult3 = Context.Map.euhe.ExecutionState;
	ENiagaraExecutionStateSource_IfResult3 = Context.Map.euhe.ExecutionStateSource;
	}
	Context.Map.euhe.ExecutionState = ENiagaraExecutionState_IfResult3;
	Context.Map.euhe.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult3;
}

void EmitterState_EmitterChangeState_euhe_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant30 = 3;
	bool Result33 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant30);
	int Constant31 = 4;
	bool Result34 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant31);
	bool Result35 = Result33 && Result34;
	bool Result36 = In_Condition && Result35;
	bool Result37 = NiagaraAll(Context.Map.euhe.ExecutionStateSource <= In_NewStateSource);
	bool Result38 = Result36 && Result37;
	int ENiagaraExecutionState_IfResult4;
	int ENiagaraExecutionStateSource_IfResult4;
	if(Result38)
	{
	ENiagaraExecutionState_IfResult4 = In_NewState;
	ENiagaraExecutionStateSource_IfResult4 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult4 = Context.Map.euhe.ExecutionState;
	ENiagaraExecutionStateSource_IfResult4 = Context.Map.euhe.ExecutionStateSource;
	}
	Context.Map.euhe.ExecutionState = ENiagaraExecutionState_IfResult4;
	Context.Map.euhe.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult4;
}

void EmitterState_EmitterChangeState005_euhe_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant36 = 3;
	bool Result42 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant36);
	int Constant37 = 4;
	bool Result43 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant37);
	bool Result44 = Result42 && Result43;
	bool Result45 = In_Condition && Result44;
	bool Result46 = NiagaraAll(Context.Map.euhe.ExecutionStateSource <= In_NewStateSource);
	bool Result47 = Result45 && Result46;
	int ENiagaraExecutionState_IfResult5;
	int ENiagaraExecutionStateSource_IfResult5;
	if(Result47)
	{
	ENiagaraExecutionState_IfResult5 = In_NewState;
	ENiagaraExecutionStateSource_IfResult5 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult5 = Context.Map.euhe.ExecutionState;
	ENiagaraExecutionStateSource_IfResult5 = Context.Map.euhe.ExecutionStateSource;
	}
	Context.Map.euhe.ExecutionState = ENiagaraExecutionState_IfResult5;
	Context.Map.euhe.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult5;
}

void EmitterState_EmitterChangeState003_euhe_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant42 = 3;
	bool Result52 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant42);
	int Constant43 = 4;
	bool Result53 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant43);
	bool Result54 = Result52 && Result53;
	bool Result55 = In_Condition && Result54;
	bool Result56 = NiagaraAll(Context.Map.euhe.ExecutionStateSource <= In_NewStateSource);
	bool Result57 = Result55 && Result56;
	int ENiagaraExecutionState_IfResult6;
	int ENiagaraExecutionStateSource_IfResult6;
	if(Result57)
	{
	ENiagaraExecutionState_IfResult6 = In_NewState;
	ENiagaraExecutionStateSource_IfResult6 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult6 = Context.Map.euhe.ExecutionState;
	ENiagaraExecutionStateSource_IfResult6 = Context.Map.euhe.ExecutionStateSource;
	}
	Context.Map.euhe.ExecutionState = ENiagaraExecutionState_IfResult6;
	Context.Map.euhe.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult6;
}

void EmitterState_euhe_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.euhe.ExecutionState;
	float Constant16 = 0.016667;
	float Result18 = max(Context.Map.Constants.euhe.EmitterState.LoopDuration, Constant16);
	Context.Map.Local.EmitterState.LoopDuration = Result18;
	float Constant17 = 0;
	bool Result19 = NiagaraAll(Context.Map.euhe.Age == Constant17);
	float Duration_IfResult1;
	if(Result19)
	{
	Duration_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult1 = Context.Map.euhe.CurrentLoopDuration;
	}
	float Constant18 = 0;
	Context.Map.euhe.CurrentLoopDuration = Duration_IfResult1;
	Context.Map.EmitterState.LoopDelay = Constant18;
	float Result20 = Context.Map.euhe.Age + Context.Map.Engine.DeltaTime;
	float Result21 = Context.Map.Engine.DeltaTime + Context.Map.euhe.LoopedAge;
	bool Result22 = NiagaraAll(Result21 >= Context.Map.euhe.CurrentLoopDuration);
	int Constant19 = 0;
	Context.Map.euhe.Age = Result20;
	Context.Map.euhe.LoopedAge = Result21;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result22;
	Context.Map.euhe.LoopCount = Constant19;
	float Constant20 = 0;
	float Duration_IfResult2;
	float LoopedAge_IfResult1;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	Duration_IfResult2 = Context.Map.Local.EmitterState.LoopDuration;
	LoopedAge_IfResult1 = Constant20;
	}
	else
	{
	Duration_IfResult2 = Context.Map.euhe.CurrentLoopDuration;
	LoopedAge_IfResult1 = Context.Map.euhe.LoopedAge;
	}
	Context.Map.euhe.CurrentLoopDuration = Duration_IfResult2;
	Context.Map.euhe.LoopedAge = LoopedAge_IfResult1;
	float Result23 = Context.Map.euhe.LoopedAge / Context.Map.euhe.CurrentLoopDuration;
	Context.Map.euhe.NormalizedLoopAge = Result23;
	float Constant21 = 0;
	float Constant22 = 1.0001;
	float Result24 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant21,Constant22);
	Context.Map.euhe.Scalability.DistanceFraction = Result24;
	int Constant23 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant23;
	int Constant24 = 0;
	bool Result25 = NiagaraAll(Context.Map.Engine.euhe.NumParticles == Constant24);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result25;
	int Constant25 = 0;
	bool Result26 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant25);
	EmitterState_EmitterChangeState002_euhe_Func_(Context.Map.System.ExecutionState, Result26, Context.Map.System.ExecutionStateSource, Context);
	int Constant28 = 1;
	int Constant29 = 1;
	EmitterState_EmitterChangeState_euhe_Func_(Constant28, Context.Map.Local.EmitterState.LoopCountIncreased, Constant29, Context);
	int Constant32 = 1;
	int Constant33 = 0;
	bool Result39 = NiagaraAll(Context.Map.System.ExecutionState != Constant33);
	int Constant34 = 2;
	bool Result40 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant34);
	bool Result41 = Result39 && Result40;
	int Constant35 = 1;
	EmitterState_EmitterChangeState005_euhe_Func_(Constant32, Result41, Constant35, Context);
	int Constant38 = 3;
	int Constant39 = 0;
	bool Result48 = NiagaraAll(Context.Map.euhe.ExecutionState != Constant39);
	int Constant40 = 0;
	bool Result49 = NiagaraAll(Context.Map.euhe.ExecutionStateSource != Constant40);
	bool Result50 = Result48 && Result49;
	bool Result51 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result50;
	int Constant41 = 3;
	EmitterState_EmitterChangeState003_euhe_Func_(Constant38, Result51, Constant41, Context);
}

void SpawnRate_euhe_Func_(inout FSimulationContext Context)
{
	float Constant44 = 1;
	Context.Map.Transient.ScalabilityEmitterSpawnCountScale = Constant44;
	float Result58 = Context.Map.Constants.euhe.SpawnRate.SpawnRate * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.euhe.SpawnCountScale;
	float Result59 = Reciprocal(Result58);
	float Result60 = 1 - Context.Map.euhe.SpawnRate.SpawnRemainder;
	float Result61 = Result59 * Result60;
	Context.Map.Local.SpawnRate.SpawnRate = Result58;
	Context.Map.Local.SpawnRate.IntervalDT = Result59;
	Context.Map.Local.SpawnRate.InterpStartDT = Result61;
	float Constant45 = 0;
	bool Result62 = NiagaraAll(Context.Map.euhe.LoopedAge >= Constant45);
	float Constant46 = 1;
	float Constant47 = 0;
	float float_IfResult1;
	if(Result62)
	{
	float_IfResult1 = Constant46;
	}
	else
	{
	float_IfResult1 = Constant47;
	}
	float Result63 = Context.Map.Local.SpawnRate.SpawnRate * float_IfResult1;
	float Result64 = Result63 * Context.Map.Engine.DeltaTime + Context.Map.euhe.SpawnRate.SpawnRemainder;
	float Result65 = floor(Result64);
	float Result66 = Result64 - Result65;
	Context.Map.Local.SpawnRate.SpawnCount = Result65;
	Context.Map.euhe.SpawnRate.SpawnRemainder = Result66;
	NiagaraSpawnInfo Output1;
	Output1.Count = Context.Map.Local.SpawnRate.SpawnCount;
	Output1.InterpStartDt = Context.Map.Local.SpawnRate.InterpStartDT;
	Output1.IntervalDt = Context.Map.Local.SpawnRate.IntervalDT;
	Output1.SpawnGroup = Context.Map.Constants.euhe.SpawnRate.SpawnGroup;
	bool Constant48 = true;
	Context.Map.euhe.SpawnRate.SpawnOutputInfo = Output1;
	Context.Map.Transient.SpawningbCanEverSpawn = Constant48;
}

void GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant60 = false;
	int Constant61 = 0;
	bool Result73 = NiagaraAll(In_RandomnessMode == Constant61);
	bool Result74 = Constant60 && Result73;
	int Constant62 = 1;
	bool Result75 = NiagaraAll(In_RandomnessMode == Constant62);
	bool Result76 = Result74 || Result75;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.User.euhe.RandomSeed;
	}
	int Constant63 = 0;
	int Constant64 = 0;
	int Constant65 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant63;
	Seed3_IfResult = Constant64;
	}
	else
	{
	Seed1_IfResult = Constant65;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant66 = -1;
	int Constant67 = -1;
	int Constant68 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result76)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant66;
	Seed2_IfResult1 = Constant67;
	Seed3_IfResult1 = Constant68;
	}
	NiagaraRandInfo Output12;
	Output12.Seed1 = Seed1_IfResult1;
	Output12.Seed2 = Seed2_IfResult1;
	Output12.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output12;
	Out_UseDeterministicRandoms = Result76;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant55 = (0);
	bool Constant56 = false;
	int Constant57 = 0;
	int Constant58 = (0);
	bool Constant59 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_(In_Seed, Constant55, In_OverrideSeed, Constant57, Constant58, Constant59, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms, Context);
	float Result77 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_RandomInfo.Seed3;
	float Result78 = rand_float(Result77, Seed1, Seed2, Seed3);
	float Result79 = rand_float(Result77);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Emitter_Emitter_Emitter_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result78;
	}
	else
	{
	Random_IfResult = Result79;
	}
	float Result80 = In_Min + Random_IfResult;
	Out_Result = Result80;
}

void SpawnBurst_Instantaneous_euhe_Func_(inout FSimulationContext Context)
{
	Context.Map.SpawnBurst_Instantaneous.Age = Context.Map.euhe.LoopedAge;
	float Result67 = Context.Map.SpawnBurst_Instantaneous.Age - Context.Map.Engine.DeltaTime;
	float Result68 = Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnTime - Result67;
	float Constant49 = 0;
	float Output11;
	Output11 = Constant49;
	bool Result69 = NiagaraAll(Result68 >= Output11);
	float Result70 = Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnTime - Context.Map.SpawnBurst_Instantaneous.Age;
	bool Result71 = NiagaraAll(Result70 < Output11);
	bool Result72 = Result69 && Result71;
	float Constant50 = 0;
	float Constant51 = 1;
	int Constant52 = -1;
	int Constant53 = 0;
	bool Constant54 = false;
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Constant50, Constant51, Constant52, Constant53, Constant54, RandomRangeFloat_Func_Output_Result, Context);
	bool Result81 = NiagaraAll(RandomRangeFloat_Func_Output_Result <= Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnProbability);
	bool Result82 = Result72 && Result81;
	int Constant69 = 0;
	bool Result83 = NiagaraAll(Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnCount == Constant69);
	float Constant70 = 0;
	float Result84 = Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnCount * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.euhe.SpawnCountScale;
	float Constant71 = 1;
	float Result85 = max(Result84, Constant71);
	float float_IfResult2;
	if(Result83)
	{
	float_IfResult2 = Constant70;
	}
	else
	{
	float_IfResult2 = Result85;
	}
	float Constant72 = 0;
	NiagaraSpawnInfo Output13;
	Output13.Count = float_IfResult2;
	Output13.InterpStartDt = Result68;
	Output13.IntervalDt = Constant72;
	Output13.SpawnGroup = Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnGroup;
	int Constant73 = 0;
	float Constant74 = 0;
	float Constant75 = 0;
	NiagaraSpawnInfo Output14;
	Output14.Count = Constant73;
	Output14.InterpStartDt = Constant74;
	Output14.SpawnGroup = Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnGroup;
	Output14.IntervalDt = Constant75;
	NiagaraSpawnInfo SpawnInfo_IfResult;
	if(Result82)
	{
	SpawnInfo_IfResult = Output13;
	}
	else
	{
	SpawnInfo_IfResult = Output14;
	}
	Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst = SpawnInfo_IfResult;
	bool Result86 = NiagaraAll(Context.Map.euhe.LoopedAge <= Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnTime);
	bool Result87 = Context.Map.Transient.SpawningbCanEverSpawn || Result86;
	Context.Map.Transient.SpawningbCanEverSpawn = Result87;
}

void euhe_Func_(inout FSimulationContext Context)
{
	EnterStatScope(3 );
	EmitterState_euhe_Func_(Context);
	ExitStatScope( );
	EnterStatScope(4 );
	SpawnRate_euhe_Func_(Context);
	ExitStatScope( );
	EnterStatScope(5 );
	SpawnBurst_Instantaneous_euhe_Func_(Context);
	ExitStatScope( );
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = (false);
	Context.Map.Local.SystemState.LoopCountIncreased = Constant;
	bool Constant1 = false;
	Context.Map.SystemState.RecalculateDurationEachLoop = Constant1;
	int Constant2 = 0;
	Context.Map.Transient.ScalabilityExecutionState = Constant2;
	EnterStatScope(1 );
	SystemState_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	euhe_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(6 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = InputDataInt(0, 0);
	Context.Map.euhe.Age = InputDataFloat(0, 1);
	Context.Map.euhe.CurrentLoopDuration = InputDataFloat(0, 2);
	Context.Map.euhe.ExecutionState = InputDataInt(0, 3);
	Context.Map.euhe.ExecutionStateSource = InputDataInt(0, 4);
	Context.Map.euhe.LocalSpace = InputDataBool(0, 5);
	Context.Map.euhe.LoopCount = InputDataInt(0, 6);
	Context.Map.euhe.LoopedAge = InputDataFloat(0, 7);
	Context.Map.euhe.NormalizedLoopAge = InputDataFloat(0, 8);
	Context.Map.euhe.Scalability.DistanceFraction = InputDataFloat(0, 9);
	Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst.Count = 0;
	Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt = 0.0f;
	Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt = 0.0f;
	Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup = 0;
	Context.Map.euhe.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.euhe.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.euhe.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.euhe.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.euhe.SpawnRate.SpawnRemainder = InputDataFloat(0, 18);
	Context.Map.System.Age = InputDataFloat(0, 19);
	Context.Map.System.bCompleteOnInactive = InputDataBool(0, 20);
	Context.Map.System.CurrentLoopDuration = InputDataFloat(0, 21);
	Context.Map.System.ExecutionState = InputDataInt(0, 22);
	Context.Map.System.ExecutionStateSource = InputDataInt(0, 23);
	Context.Map.System.LoopCount = InputDataInt(0, 24);
	Context.Map.System.LoopedAge = InputDataFloat(0, 25);
	Context.Map.System.NormalizedLoopAge = InputDataFloat(0, 26);
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Engine.euhe.NumParticles = InputDataInt(1, 1);
	Context.Map.Engine.euhe.SpawnCountScale = InputDataFloat(1, 2);
	Context.Map.Engine.Owner.ExecutionState = InputDataInt(1, 3);
	Context.Map.Engine.Owner.LODDistanceFraction = InputDataFloat(1, 4);
	Context.Map.Engine.System.TickCount = InputDataInt(1, 5);
	Context.Map.User.euhe.RandomSeed = InputDataInt(1, 6);
	Context.Map.Constants.SystemState.LoopDelay = Constants_SystemState_LoopDelay;
	Context.Map.Constants.SystemState.LoopDuration = Constants_SystemState_LoopDuration;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.euhe.EmitterState.LoopDuration = Constants_euhe_EmitterState_LoopDuration;
	Context.Map.Constants.euhe.EmitterState.LoopDelay = Constants_euhe_EmitterState_LoopDelay;
	Context.Map.Constants.euhe.SpawnRate.SpawnRate = Constants_euhe_SpawnRate_SpawnRate;
	Context.Map.Constants.euhe.SpawnRate.SpawnGroup = Constants_euhe_SpawnRate_SpawnGroup;
	Context.Map.Constants.euhe.SpawnRate.SpawnProbability = Constants_euhe_SpawnRate_SpawnProbability;
	Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnTime = Constants_euhe_SpawnBurst_Instantaneous_SpawnTime;
	Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnGroup = Constants_euhe_SpawnBurst_Instantaneous_SpawnGroup;
	Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnProbability = Constants_euhe_SpawnBurst_Instantaneous_SpawnProbability;
	Context.Map.Constants.euhe.SpawnBurst_Instantaneous.SpawnCount = Constants_euhe_SpawnBurst_Instantaneous_SpawnCount;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.euhe.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.euhe.CurrentLoopDuration);
	OutputDataInt(0, 3, TmpWriteIndex, Context.Map.euhe.ExecutionState);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.euhe.ExecutionStateSource);
	OutputDataBool(0, 5, TmpWriteIndex, Context.Map.euhe.LocalSpace);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.euhe.LoopCount);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.euhe.LoopedAge);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.euhe.NormalizedLoopAge);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.euhe.Scalability.DistanceFraction);
	OutputDataInt(0, 10, TmpWriteIndex, Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst.Count);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst.InterpStartDt);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst.IntervalDt);
	OutputDataInt(0, 13, TmpWriteIndex, Context.Map.euhe.SpawnBurst_Instantaneous.SpawnBurst.SpawnGroup);
	OutputDataInt(0, 14, TmpWriteIndex, Context.Map.euhe.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.euhe.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.euhe.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 17, TmpWriteIndex, Context.Map.euhe.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.euhe.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 20, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 22, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 23, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
