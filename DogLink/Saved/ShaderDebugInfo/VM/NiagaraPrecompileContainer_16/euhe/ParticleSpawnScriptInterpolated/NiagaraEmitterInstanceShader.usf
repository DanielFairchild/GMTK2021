#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_UniformRangedFloat004_Minimum;
	float Constants_Emitter_UniformRangedFloat004_Maximum;
	int Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float Constants_Emitter_UniformRangedFloat005_Minimum;
	float Constants_Emitter_UniformRangedFloat005_Maximum;
	int Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float4 Constants_Emitter_InitializeParticle_Color;
	float2 Constants_Emitter_InitializeParticle_SpriteSize;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	float Constants_Emitter_AddVelocityInCone_ConeAngle;
	float Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	float3 Constants_Emitter_AddVelocityInCone_ConeAxis;
	float Constants_Emitter_AddVelocityInCone_VelocityStrength;
	float Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	float3 Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	float Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	float Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	float3 Constants_Emitter_GravityForce_Gravity;
	float Constants_Emitter_Drag_Drag;
	float Constants_Emitter_Drag_RotationalDrag;
	float Constants_Emitter_FloatFromCurve_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float Constants_Emitter_Collision_ParticleRadiusScale;
	float Constants_Emitter_Collision_Friction;
	float Constants_Emitter_Collision_StaticFriction;
	float Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	float Constants_Emitter_Collision_Restitution;
	float Constants_Emitter_Collision_RandomizeCollisionNormal;
	float Constants_Emitter_Collision_FrictionDuringaBounce;
	float3 Constants_Emitter_Collision_AnalyticalCollisionNormal1;
	float3 Constants_Emitter_Collision_AnalyticalCollisionPlanePosition1;
	float Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	float Constants_Emitter_Collision_RestStateTimeRange;
	float Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	float3 Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	float Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float Constants_Emitter_Collision_AdvancedAgingRate;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float2 Constants_Emitter_ScaleSpriteSize_ScaleFactor;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Constants_Emitter_UniformRangedFloat004_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat004_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat004_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat005_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat005_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat005_RandomSeed;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float2 PREV_Constants_Emitter_InitializeParticle_SpriteSize;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	float PREV_Constants_Emitter_AddVelocityInCone_ConeAngle;
	float PREV_Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	float3 PREV_Constants_Emitter_AddVelocityInCone_ConeAxis;
	float PREV_Constants_Emitter_AddVelocityInCone_VelocityStrength;
	float PREV_Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	float3 PREV_Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	float PREV_Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	float PREV_Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	float3 PREV_Constants_Emitter_GravityForce_Gravity;
	float PREV_Constants_Emitter_Drag_Drag;
	float PREV_Constants_Emitter_Drag_RotationalDrag;
	float PREV_Constants_Emitter_FloatFromCurve_ScaleCurve;
	float3 PREV_Constants_Emitter_ScaleColor_ScaleRGB;
	float PREV_Constants_Emitter_Collision_ParticleRadiusScale;
	float PREV_Constants_Emitter_Collision_Friction;
	float PREV_Constants_Emitter_Collision_StaticFriction;
	float PREV_Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	float PREV_Constants_Emitter_Collision_Restitution;
	float PREV_Constants_Emitter_Collision_RandomizeCollisionNormal;
	float PREV_Constants_Emitter_Collision_FrictionDuringaBounce;
	float3 PREV_Constants_Emitter_Collision_AnalyticalCollisionNormal1;
	float3 PREV_Constants_Emitter_Collision_AnalyticalCollisionPlanePosition1;
	float PREV_Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	float PREV_Constants_Emitter_Collision_RestStateTimeRange;
	float PREV_Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	float3 PREV_Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	float PREV_Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float PREV_Constants_Emitter_Collision_AdvancedAgingRate;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float2 PREV_Constants_Emitter_ScaleSpriteSize_ScaleFactor;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_UniformRangedFloat005
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat004
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float CollisionDistanceToCollision;
	float CollisionFriction;
	bool CollisionIsResting;
	float3 CollisionNormal;
	float3 CollisionParticleRelativeCollisionLocation;
	float3 CollisionParticleWorldPosition;
	float CollisionRestitution;
	float CollisionSize;
	bool CollisionValid;
	float3 CollisionVelocity;
	float3 CollisionWorldPosition;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float PhysicsRotationalDrag;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSize
{
	float2 InitialSpriteSize;
	float2 ScaleFactor;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float2 SpriteSize;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	bool HasCollided;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	int NumberOfCollisions;
	float3 Position;
	float3 PreviousVelocity;
	float RestCounter;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001
{
	float CollisionPenetrationDistance;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision
{
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool CollisionValid;
	float3 ModuleCollision1Normal;
	bool ModuleCollision1Valid;
	float3 ModuleCollision2Normal;
	bool ModuleCollision2Valid;
	float3 ModuleCombinedCollisionNormal;
	float3 TempPreviousForce;
	float3 TempPreviousPosition;
	float3 TempPreviousVelocity;
};

struct FParamMap0_OUTPUT_VAR_AddVelocityFromPoint
{
	float NormalizedFalloff;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_OUTPUT_VAR_Collision Collision;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision
{
	FParamMap0_Local_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	float ModuleParticleRadius;
	bool UpdateMeshRotation;
};

struct FParamMap0_Local_AddVelocityInCone
{
	float3 ConeVector;
	float DotBetweenConeVectorAndAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Local_Collision Collision;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat005
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat004
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleSpriteSize
{
	float2 ScaleFactor;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float3 MeshScale;
	float SpriteRotation;
	float2 SpriteSize;
};

struct FParamMap0_Constants_Emitter_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Drag
{
	float Drag;
	float RotationalDrag;
};

struct FParamMap0_Constants_Emitter_Collision
{
	float AdvancedAgingRate;
	float3 AnalyticalCollisionNormal1;
	float3 AnalyticalCollisionPlanePosition1;
	float Friction;
	float FrictionDuringaBounce;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_Constants_Emitter_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0_Constants_Emitter_AddVelocityFromPoint
{
	float3 OriginOffset;
	float VelocityFalloffDistance;
	float VelocityStrength;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_Constants_Emitter_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Constants_Emitter_Collision Collision;
	FParamMap0_Constants_Emitter_Drag Drag;
	FParamMap0_Constants_Emitter_FloatFromCurve FloatFromCurve;
	FParamMap0_Constants_Emitter_GravityForce GravityForce;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_Constants_Emitter_UniformRangedFloat005 UniformRangedFloat005;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_Collision_CollisionQueryAndResponse001
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_CollisionQueryAndResponse
{
	float3 AnalyticalCollisionNormal;
	float3 AnalyticalCollisionPlanePosition;
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision
{
	float AdvancedAgingRate;
	float3 AnalyticalCollisionNormal1;
	float3 AnalyticalCollisionPlanePosition1;
	int AnalyticalCollisionPlaneSpace;
	bool CollisionEnabled;
	FParamMap0_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool ControlRestStateViaSurfaceNormal;
	bool EnableRestState;
	float Friction;
	float FrictionDuringaBounce;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	bool RandomizeCollisionNormalVector;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	int ConeAxisCoordinateSpace;
	bool UseVelocityFalloffOnConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0_AddVelocityFromPoint
{
	float3 DefaultPosition;
	bool InvertVelocityFalloff;
	float3 OriginOffset;
	int OriginOffsetCoordinateSpace;
	bool UseFalloffDistance;
	float VelocityFalloffDistance;
	float3 VelocityOrigin;
	float VelocityStrength;
};

struct FParamMap0
{
	FParamMap0_AddVelocityFromPoint AddVelocityFromPoint;
	FParamMap0_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Collision Collision;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Drag Drag;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve FloatFromCurve;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleSpriteSize ScaleSpriteSize;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat004 UniformRangedFloat004;
	FParamMap0_UniformRangedFloat005 UniformRangedFloat005;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void PolarToCartesianCoordinates_Func_(float In_Theta, float In_Radius, float In_Period, out float2 Out_XY, out float Out_X, out float Out_Y, out float2 Out_dXdY, out float Out_dX, out float Out_dY, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void RandomVectorInCone_Func_(float In_ConeAngle, float In_ConePointDistribution, bool In_EnableCurvature, float In_ConeCurvature, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, out float3 Out_NormalizedVector, inout FSimulationContext Context);
void RemapValueRange_Func_(float In_INPUT_VAR, float In_InputLow, float In_InputHigh, float In_TargetLow, float In_TargetHigh, out float Out_Remapped, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void AddVelocityInCone_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result);
void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context);
void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context);
void AddVelocityInCone_Emitter_Func_(inout FSimulationContext Context);
void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context);
void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context);
void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context);
void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context);
void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void Drag_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve(float In_X, out float Out_Value);
void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_(float2 In_SpriteSize, out float Out_Radius, inout FSimulationContext Context);
void Collision_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void Collision_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector004_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformPosition002_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void PlaneSphereCollisionDetection_Func_(float3 In_PlaneNormal, float3 In_PlanePivotPoint, float3 In_InitialSphereLocation, float3 In_SpherePositionDelta, float In_CollisionRadius, float In_PhysicsDeltaTime, float In_MaxCorrectiondistance, out bool Out_Collides, out float3 Out_IntersectionLocation, out float3 Out_PreASC45IntersectionSphereCenterLocation, out float3 Out_InitialPositionRelativeCollisionLocation, out float Out_TimeElapsedToCollision, out float Out_RemainingTimePostCollision, out float Out_PercentageofTimeUsedToPerformCollision, out float Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, out float Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void RandomizeCollisionNormals_Func_(float3 In_ConeAxis, float In_Scale, float In_Spread, out float3 Out_Ouput, inout FSimulationContext Context);
void ReflectVector_Func_(float3 In_InVector, float3 In_Normal, out float3 Out_Reflected, inout FSimulationContext Context);
void CentimeterMeterConversion_Func_(float3 In_INPUT_VAR, out float3 Out_CentimeterstoMeters, out float3 Out_MeterstoCentimeters, inout FSimulationContext Context);
void ProjectVectorOnPlane_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context);
void Collision_CollisionQueryAndResponse_Emitter_Func_(inout FSimulationContext Context);
void Collision_TransformPosition001_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void Collision_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant23 = false;
	int Constant24 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant24);
	bool Result1 = Constant23 && Result;
	int Constant25 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant25);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant26 = 0;
	int Constant27 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant26;
	Seed3_IfResult = Constant27;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant28 = -1;
	int Constant29 = -1;
	int Constant30 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant28;
	Seed2_IfResult1 = Constant29;
	Seed3_IfResult1 = Constant30;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant19 = (0);
	bool Constant20 = false;
	int Constant21 = 0;
	int Constant22 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant19, In_OverrideSeed, Constant21, Constant22, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void UniformRangedFloat004_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant17 = 0;
	bool Constant18 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.UniformRangedFloat004.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.UniformRangedFloat004.RandomnessMode;
	Override_IfResult = Context.MapSpawn.UniformRangedFloat004.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant17;
	Override_IfResult = Constant18;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result;
}

void UniformRangedFloat005_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant35 = 0;
	bool Constant36 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.UniformRangedFloat005.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.UniformRangedFloat005.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.UniformRangedFloat005.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant35;
	Override_IfResult1 = Constant36;
	}
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed, RandomRangeFloat_Func_Output_Result1, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result1;
}

void ParticleOwnerPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant40 = false;
	float3 Constant41 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant40)
	{
	Vector_IfResult = Constant41;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant47 = false;
	float3 Constant48 = float3(0,0,0);
	float3 Vector_IfResult1;
	if(Constant47)
	{
	Vector_IfResult1 = Constant48;
	}
	else
	{
	Vector_IfResult1 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult1;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant55 = (0);
	bool Constant56 = false;
	int Constant57 = 0;
	int Constant58 = (0);
	bool Constant59 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant55, In_OverrideSeed, Constant57, Constant58, Constant59, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float Result8 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float Result9 = rand_float(Result8, Seed11, Seed21, Seed31);
	float Result10 = rand_float(Result8);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result9;
	}
	else
	{
	Random_IfResult1 = Result10;
	}
	float Result11 = In_Min + Random_IfResult1;
	Out_Result = Result11;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void PolarToCartesianCoordinates_Func_(float In_Theta, float In_Radius, float In_Period, out float2 Out_XY, out float Out_X, out float Out_Y, out float2 Out_dXdY, out float Out_dX, out float Out_dY, inout FSimulationContext Context)
{
	float Result19 = cos(In_Theta*(TWO_PI/In_Period));
	float Result20 = In_Radius * Result19;
	float Result21 = sin(In_Theta*(TWO_PI/In_Period));
	float Result22 = In_Radius * Result21;
	float2 XY;
	XY.x = Result20;
	XY.y = Result22;
	float Constant85 = -1;
	float Result23 = Result21 * Constant85;
	float2 dXdY;
	dXdY.x = Result23;
	dXdY.y = Result19;
	Out_XY = XY;
	Out_X = Result20;
	Out_Y = Result22;
	Out_dXdY = dXdY;
	Out_dX = Result23;
	Out_dY = Result19;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result26 = length(In_V);
	bool Result27 = NiagaraAll(Result26 < In_Threshold);
	float Result28 = length(In_Fallback);
	float3 Vector_IfResult2;
	float float_IfResult1;
	if(Result27)
	{
	Vector_IfResult2 = In_Fallback;
	float_IfResult1 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult2 = In_V;
	float_IfResult1 = Result26;
	}
	float3 Result29 = Vector_IfResult2 / float_IfResult1;
	float3 Vector_IfResult3;
	float float_IfResult2;
	if(Result27)
	{
	Vector_IfResult3 = In_Fallback;
	float_IfResult2 = Result28;
	}
	else
	{
	Vector_IfResult3 = Result29;
	float_IfResult2 = float_IfResult1;
	}
	Out_Direction = Vector_IfResult3;
	Out_Length = float_IfResult2;
	Out_BelowThreshold = Result27;
}

void RandomVectorInCone_Func_(float In_ConeAngle, float In_ConePointDistribution, bool In_EnableCurvature, float In_ConeCurvature, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, out float3 Out_NormalizedVector, inout FSimulationContext Context)
{
	float Constant70 = 0;
	float Constant71 = 1;
	bool Constant72 = false;
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Constant70, Constant71, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant72, RandomRangeFloat_Func_Output_Result3, Context);
	float Constant73 = 0;
	float Constant74 = 1;
	bool Constant75 = false;
	float RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Constant73, Constant74, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant75, RandomRangeFloat_Func_Output_Result4, Context);
	float Result13 = pow(RandomRangeFloat_Func_Output_Result4,In_ConePointDistribution);
	float Constant76 = 1e-05;
	float Constant77 = 179.875;
	float Result14 = clamp(In_ConeAngle,Constant76,Constant77);
	float Constant78 = 0.5;
	float Result15 = Result14 * Constant78;
	float Result16 = tan((PI/180.0f)*Result15);
	float Constant79 = 0;
	float Constant80 = 1;
	bool Constant81 = false;
	float RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Constant79, Constant80, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant81, RandomRangeFloat_Func_Output_Result5, Context);
	float Constant82 = 0.0001;
	float Constant83 = 10;
	float Result17 = clamp(In_ConeCurvature,Constant82,Constant83);
	float Result18 = pow(RandomRangeFloat_Func_Output_Result3,Result17);
	float float_IfResult;
	if(In_EnableCurvature)
	{
	float_IfResult = Result18;
	}
	else
	{
	float_IfResult = RandomRangeFloat_Func_Output_Result3;
	}
	float Constant84 = 1;
	float2 PolarToCartesianCoordinates_Func_Output_XY;
	float PolarToCartesianCoordinates_Func_Output_X;
	float PolarToCartesianCoordinates_Func_Output_Y;
	float2 PolarToCartesianCoordinates_Func_Output_dXdY;
	float PolarToCartesianCoordinates_Func_Output_dX;
	float PolarToCartesianCoordinates_Func_Output_dY;
	PolarToCartesianCoordinates_Func_(RandomRangeFloat_Func_Output_Result5, float_IfResult, Constant84, PolarToCartesianCoordinates_Func_Output_XY, PolarToCartesianCoordinates_Func_Output_X, PolarToCartesianCoordinates_Func_Output_Y, PolarToCartesianCoordinates_Func_Output_dXdY, PolarToCartesianCoordinates_Func_Output_dX, PolarToCartesianCoordinates_Func_Output_dY, Context);
	float2 Result24 = Result16 * PolarToCartesianCoordinates_Func_Output_XY;
	float2 Result25 = Result13 * Result24;
	float X;
	float Y;
	X = Result25.x;
	Y = Result25.y;
	float3 Output11;
	Output11.x = RandomRangeFloat_Func_Output_Result3;
	Output11.y = X;
	Output11.z = Y;
	float3 Constant86 = float3(1,0,0);
	float Constant87 = 1e-05;
	float Constant88 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Output11, Constant86, Constant87, Constant88, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	Out_Vector = Output11;
	Out_NormalizedVector = DirectionAndLengthSafe_Func_Output_Direction;
}

void RemapValueRange_Func_(float In_INPUT_VAR, float In_InputLow, float In_InputHigh, float In_TargetLow, float In_TargetHigh, out float Out_Remapped, inout FSimulationContext Context)
{
	float Result33 = In_INPUT_VAR - In_InputLow;
	float Result34 = In_InputHigh - In_InputLow;
	float Result35 = Result33 / Result34;
	float Result36 = In_TargetHigh - In_TargetLow;
	float Result37 = Result35 * Result36;
	float Result38 = Result37 + In_TargetLow;
	Out_Remapped = Result38;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant100 = 0;
	bool Result41 = NiagaraAll(In_SourceSpace == Constant100);
	int Constant101 = 0;
	bool Result42 = NiagaraAll(In_DestinationSpace == Constant101);
	bool Result43 = Result41 && Result42;
	int Constant102 = 1;
	bool Result44 = NiagaraAll(In_SourceSpace == Constant102);
	int Constant103 = 1;
	bool Result45 = NiagaraAll(In_DestinationSpace == Constant103);
	bool Result46 = Result44 && Result45;
	bool Result47 = Result43 || Result46;
	int Constant104 = 2;
	bool Result48 = NiagaraAll(In_SourceSpace == Constant104);
	int Constant105 = 2;
	bool Result49 = NiagaraAll(In_DestinationSpace == Constant105);
	bool Result50 = Result48 && Result49;
	bool Result51 = Result47 || Result50;
	bool Result52 = Result41 && Result49;
	bool Result53 = Result48 && Result42;
	bool Result54 = Result52 || Result53;
	bool Result55 = In_bLocalSpace && Result54;
	bool Result56 = Result51 || Result55;
	bool Result57 = !In_bLocalSpace;
	bool Result58 = Result41 && Result45;
	bool Result59 = Result44 && Result42;
	bool Result60 = Result58 || Result59;
	bool Result61 = Result57 && Result60;
	bool Result62 = Result56 || Result61;
	bool Result63 = In_bLocalSpace && Result58;
	bool Result64 = Result48 && Result45;
	bool Result65 = Result63 || Result64;
	bool Result66 = Result57 && Result53;
	bool Result67 = Result65 || Result66;
	float4x4 Matrix_IfResult1;
	if(Result67)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result62;
	Out_OutTransform = Matrix_IfResult1;
}

void AddVelocityInCone_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant99 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant99, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result68 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult4;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult4 = In_InVector;
	}
	else
	{
	Vector_IfResult4 = Result68;
	}
	Out_OutVector = Vector_IfResult4;
}

void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result)
{



		float NormAB = 1.0f;
	    float NormFactor = sqrt((In_From.x*In_From.x + In_From.y*In_From.y + In_From.z*In_From.z) * (In_To.x*In_To.x + In_To.y*In_To.y + In_To.z*In_To.z));

	    if (In_InputsAreNormalized)
	    {
	         NormAB = 1.0f;
	    }
	    else
	    {
	         NormAB = NormFactor;
	   }

		float w = NormAB + dot(In_From, In_To);
	    float4 Result1 = float4(In_From.y * In_To.z - In_From.z * In_To.y,
						   In_From.z * In_To.x - In_From.x * In_To.z,
						   In_From.x * In_To.y - In_From.y * In_To.x,
						   w);
		float4 Result2 = float4(-In_From.z, 0.0f, In_From.x, 0.0f);
	    float4 Result3 = float4(0.0f, -In_From.z, In_From.y, 0.0f);


	    if (abs(In_From.x) > abs(In_From.y))
	    {
	        Out_Result = Result2;
	    }
	    else
	    {
	        Out_Result = Result3;
	    }


		if (w >= 3.4e-4f * NormAB)
		{

			Out_Result = Result1;
		}

		Out_Result = normalize(Out_Result);

}

void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context)
{
	float4 CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
	CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(In_InputsAreNormalized, In_From, In_To, CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result);
	Out_NewOutput = CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
}

void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output0;
	float Output12;
	Output0.x = In_Quaternion.x;
	Output0.y = In_Quaternion.y;
	Output0.z = In_Quaternion.z;
	Output12 = In_Quaternion.w;
	float Result69 = dot(Output0,In_VECTOR_VAR);
	float Constant107 = 2;
	float Result70 = Result69 * Constant107;
	float3 Result71 = Output0 * Result70;
	float Result72 = Output12 * Output12;
	float Result73 = dot(Output0,Output0);
	float Result74 = Result72 - Result73;
	float3 Result75 = Result74 * In_VECTOR_VAR;
	float3 Result76 = Result71 + Result75;
	float3 Result77 = cross(Output0,In_VECTOR_VAR);
	float Constant108 = 2;
	float Result78 = Output12 * Constant108;
	float3 Result79 = Result77 * Result78;
	float3 Result80 = Result76 + Result79;
	Out_Vector = Result80;
}

void AddVelocityInCone_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant64 = 1e-05;
	float Result12 = max(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAngle, Constant64);
	bool Constant65 = false;
	float Constant66 = 1;
	int Constant67 = -1;
	int Constant68 = 0;
	bool Constant69 = false;
	float3 RandomVectorInCone_Func_Output_Vector;
	float3 RandomVectorInCone_Func_Output_NormalizedVector;
	RandomVectorInCone_Func_(Result12, Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityDistributionAlongConeAxis, Constant65, Constant66, Constant67, Constant68, Constant69, RandomVectorInCone_Func_Output_Vector, RandomVectorInCone_Func_Output_NormalizedVector, Context);
	float3 Constant89 = float3(1,0,0);
	float Result30 = dot(Constant89,RandomVectorInCone_Func_Output_NormalizedVector);
	float Constant90 = 0.5;
	float Result31 = Result12 * Constant90;
	float Result32 = cos((PI/180.0f)*Result31);
	float Constant91 = 1;
	float Constant92 = 0;
	float Constant93 = 1;
	float RemapValueRange_Func_Output_Remapped;
	RemapValueRange_Func_(Result30, Result32, Constant91, Constant92, Constant93, RemapValueRange_Func_Output_Remapped, Context);
	float Constant94 = 0;
	float Constant95 = 1;
	float Result39 = clamp(RemapValueRange_Func_Output_Remapped,Constant94,Constant95);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = RandomVectorInCone_Func_Output_NormalizedVector;
	Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis = Result39;
	float3 Constant96 = float3(1,0,0);
	float3 Result40 = normalize(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAxis);
	int Constant97 = 0;
	bool Constant98 = false;
	float3 AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocityInCone_NF_TransformVector_Emitter_Func_(Result40, Context.MapSpawn.AddVelocityInCone.ConeAxisCoordinateSpace, Constant97, Constant98, AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	bool Constant106 = false;
	float4 FindQuatBetween_Func_Output_NewOutput;
	FindQuatBetween_Func_(Constant96, AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector, Constant106, FindQuatBetween_Func_Output_NewOutput, Context);
	float3 MultiplyVectorWithQuaternion_Func_Output_Vector;
	MultiplyVectorWithQuaternion_Func_(Context.MapSpawn.Local.AddVelocityInCone.ConeVector, FindQuatBetween_Func_Output_NewOutput, MultiplyVectorWithQuaternion_Func_Output_Vector, Context);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = MultiplyVectorWithQuaternion_Func_Output_Vector;
	float Constant109 = 0.0001;
	float Result81 = max(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityFalloffAwayFromConeAxis, Constant109);
	float Result82 = pow(Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis,Result81);
	float Result83 = Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityStrength * Result82;
	float float_IfResult3;
	if(Context.MapSpawn.AddVelocityInCone.UseVelocityFalloffOnConeAxis)
	{
	float_IfResult3 = Result83;
	}
	else
	{
	float_IfResult3 = Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityStrength;
	}
	float3 Result84 = Context.MapSpawn.Local.AddVelocityInCone.ConeVector * float_IfResult3;
	float3 Result85 = Context.MapSpawn.Particles.Velocity + Result84;
	Context.MapSpawn.Particles.Velocity = Result85;
}

void AddVelocityFromPoint_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant111 = false;
	float3 Constant112 = float3(0,0,0);
	float3 Vector_IfResult5;
	if(Constant111)
	{
	Vector_IfResult5 = Constant112;
	}
	else
	{
	Vector_IfResult5 = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult5;
}

void AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant117 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant117, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result86 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult6;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult6 = In_InVector;
	}
	else
	{
	Vector_IfResult6 = Result86;
	}
	Out_OutVector = Vector_IfResult6;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant124 = (0);
	bool Constant125 = false;
	int Constant126 = 0;
	int Constant127 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant124, In_OverrideSeed, Constant126, Constant127, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2, Context);
	float2 Result88 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed3;
	float2 Result89 = rand_float(Result88, Seed12, Seed22, Seed32);
	float2 Result90 = rand_float(Result88);
	float2 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result89;
	}
	else
	{
	Random_IfResult2 = Result90;
	}
	float2 Result91 = In_Min + Random_IfResult2;
	Out_Result = Result91;
}

void RandomUnitVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_UnitVector3D, out float2 Out_UnitVector2D, inout FSimulationContext Context)
{
	float2 Constant121 = float2(0,-1);
	float2 Constant122 = float2(6.28319,1);
	bool Constant123 = false;
	float2 RandomRangeFloat_Func_Output_Result6;
	RandomRangeFloat_Func_(Constant121, Constant122, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant123, RandomRangeFloat_Func_Output_Result6, Context);
	float Phi;
	float CosASC40ThetaASC41;
	Phi = RandomRangeFloat_Func_Output_Result6.x;
	CosASC40ThetaASC41 = RandomRangeFloat_Func_Output_Result6.y;
	float Result92 = cos(Phi);
	float Result93 = CosASC40ThetaASC41 * CosASC40ThetaASC41;
	float Result94 = 1 - Result93;
	float Result95 = sqrt(Result94);
	float Result96 = Result92 * Result95;
	float Result97 = sin(Phi);
	float Result98 = Result97 * Result95;
	float3 PositionOnSphere;
	PositionOnSphere.x = Result96;
	PositionOnSphere.y = Result98;
	PositionOnSphere.z = CosASC40ThetaASC41;
	float Constant128 = 0;
	float Constant129 = 6.28319;
	int Constant130 = -1;
	int Constant131 = 0;
	bool Constant132 = false;
	float RandomRangeFloat_Func_Output_Result7;
	RandomRangeFloat_Func_(Constant128, Constant129, Constant130, Constant131, Constant132, RandomRangeFloat_Func_Output_Result7, Context);
	float Result99 = cos(RandomRangeFloat_Func_Output_Result7);
	float Result100 = sin(RandomRangeFloat_Func_Output_Result7);
	float2 PositionOnCircle;
	PositionOnCircle.x = Result99;
	PositionOnCircle.y = Result100;
	Out_UnitVector3D = PositionOnSphere;
	Out_UnitVector2D = PositionOnCircle;
}

void RandomVector_Func_(int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 RandomUnitVector_Func_Output_UnitVector3D;
	float2 RandomUnitVector_Func_Output_UnitVector2D;
	RandomUnitVector_Func_(In_Seed, In_RandomnessMode, In_OverrideSeed, RandomUnitVector_Func_Output_UnitVector3D, RandomUnitVector_Func_Output_UnitVector2D, Context);
	Out_Vector = RandomUnitVector_Func_Output_UnitVector3D;
}

void NormalizeDistanceRange_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, float3 In_FallbackVector, out float Out_NormalizedRange, out float Out_InverseNormalizedRange, out float3 Out_NormalizedVectorBetweenPositions, out bool Out_WithinRange, inout FSimulationContext Context)
{
	float3 Result101 = In_StartPosition - In_EndPosition;
	float Constant133 = 1e-05;
	float Constant134 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Result101, In_FallbackVector, Constant133, Constant134, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	float Constant135 = 0;
	float float_IfResult4;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold1)
	{
	float_IfResult4 = Constant135;
	}
	else
	{
	float_IfResult4 = DirectionAndLengthSafe_Func_Output_Length1;
	}
	float Result102 = min(float_IfResult4, In_Distance);
	float Constant136 = 0.0001;
	float Result103 = max(In_Distance, Constant136);
	float Result104 = Result102 / Result103;
	float Result105 = 1 - Result104;
	bool Result106 = NiagaraAll(float_IfResult4 <= In_Distance);
	Out_NormalizedRange = Result104;
	Out_InverseNormalizedRange = Result105;
	Out_NormalizedVectorBetweenPositions = DirectionAndLengthSafe_Func_Output_Direction1;
	Out_WithinRange = Result106;
}

void DistanceBasedFalloff_Func_(float3 In_StartPosition, float3 In_EndPosition, float In_Distance, bool In_InvertFalloff, float In_FalloffScale, float3 In_FallbackVector, out float Out_Falloff, out float3 Out_NormalizedVectorBetweenPositions, out float Out_NormalizedDistanceRange, out bool Out_PositionIsWithinRange, inout FSimulationContext Context)
{
	float NormalizeDistanceRange_Func_Output_NormalizedRange;
	float NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	float3 NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	bool NormalizeDistanceRange_Func_Output_WithinRange;
	NormalizeDistanceRange_Func_(In_StartPosition, In_EndPosition, In_Distance, In_FallbackVector, NormalizeDistanceRange_Func_Output_NormalizedRange, NormalizeDistanceRange_Func_Output_InverseNormalizedRange, NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions, NormalizeDistanceRange_Func_Output_WithinRange, Context);
	float float_IfResult5;
	if(In_InvertFalloff)
	{
	float_IfResult5 = NormalizeDistanceRange_Func_Output_InverseNormalizedRange;
	}
	else
	{
	float_IfResult5 = NormalizeDistanceRange_Func_Output_NormalizedRange;
	}
	float Result107 = float_IfResult5 * In_FalloffScale;
	Out_Falloff = Result107;
	Out_NormalizedVectorBetweenPositions = NormalizeDistanceRange_Func_Output_NormalizedVectorBetweenPositions;
	Out_NormalizedDistanceRange = float_IfResult5;
	Out_PositionIsWithinRange = NormalizeDistanceRange_Func_Output_WithinRange;
}

void AddVelocityFromPoint_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant115 = 0;
	bool Constant116 = false;
	float3 AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocityFromPoint_NF_TransformVector_Emitter_Func_(Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.OriginOffset, Context.MapSpawn.AddVelocityFromPoint.OriginOffsetCoordinateSpace, Constant115, Constant116, AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	float3 Result87 = AddVelocityFromPoint_NF_TransformVector_Emitter_Func_Output_OutVector + Context.MapSpawn.AddVelocityFromPoint.VelocityOrigin;
	int Constant118 = -1;
	int Constant119 = 0;
	bool Constant120 = false;
	float3 RandomVector_Func_Output_Vector;
	RandomVector_Func_(Constant118, Constant119, Constant120, RandomVector_Func_Output_Vector, Context);
	float DistanceBasedFalloff_Func_Output_Falloff;
	float3 DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
	bool DistanceBasedFalloff_Func_Output_PositionIsWithinRange;
	DistanceBasedFalloff_Func_(Context.MapSpawn.AddVelocityFromPoint.DefaultPosition, Result87, Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance, Context.MapSpawn.AddVelocityFromPoint.InvertVelocityFalloff, Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.VelocityStrength, RandomVector_Func_Output_Vector, DistanceBasedFalloff_Func_Output_Falloff, DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions, DistanceBasedFalloff_Func_Output_NormalizedDistanceRange, DistanceBasedFalloff_Func_Output_PositionIsWithinRange, Context);
	float float_IfResult6;
	if(Context.MapSpawn.AddVelocityFromPoint.UseFalloffDistance)
	{
	float_IfResult6 = DistanceBasedFalloff_Func_Output_Falloff;
	}
	else
	{
	float_IfResult6 = Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.VelocityStrength;
	}
	float3 Result108 = float_IfResult6 * DistanceBasedFalloff_Func_Output_NormalizedVectorBetweenPositions;
	float3 Result109 = Context.MapSpawn.Particles.Velocity + Result108;
	Context.MapSpawn.Particles.Velocity = Result109;
	Context.MapSpawn.OUTPUT_VAR.AddVelocityFromPoint.NormalizedFalloff = DistanceBasedFalloff_Func_Output_NormalizedDistanceRange;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result110 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result110;
	float Result111 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant138 = 1e-05;
	float Result112 = max(Context.MapUpdate.ParticleState.Lifetime, Constant138);
	float Constant139 = 0.0001;
	float Result113 = Result112 - Constant139;
	bool Result114 = NiagaraAll(Result111 < Result113);
	bool Constant140 = false;
	bool bool_IfResult;
	if(Result114)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant140;
	}
	float Result115 = Result111 / Result112;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result111;
	Context.MapUpdate.Particles.NormalizedAge = Result115;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result116 = Context.MapUpdate.Constants.Emitter.GravityForce.Gravity * Context.MapUpdate.Particles.Mass;
	float3 Result117 = Context.MapUpdate.Transient.PhysicsForce + Result116;
	Context.MapUpdate.Transient.PhysicsForce = Result117;
}

void Drag_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Transient.PhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Context.MapUpdate.Transient.PhysicsRotationalDrag;
}

void FloatFromCurve_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve(Context.MapUpdate.FloatFromCurve.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value);
	float Result118 = SampleCurve_EmitterScaleAlphaFloatCurveOutput_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve;
	Out_Value = Result118;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output01;
	Output01.r = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output01.g = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output01.b = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output01.a = Context.MapUpdate.ScaleColor.ScaleAlpha;
	float4 Result119 = Context.MapUpdate.Transient.ParticleColorScaleFactor * Output01;
	float4 Result120 = Context.MapUpdate.ScaleColor.ColorValueToScale * Result119;
	Context.MapUpdate.Particles.Color = Result120;
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Result119;
}

void CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_(float2 In_SpriteSize, out float Out_Radius, inout FSimulationContext Context)
{
	float Result121 = length(In_SpriteSize);
	float Constant180 = 0.5;
	float Result122 = Result121 * Constant180;
	Out_Radius = Result122;
}

void Collision_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant184 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant184, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result124 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult7;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult7 = In_InPosition;
	}
	else
	{
	Vector_IfResult7 = Result124;
	}
	Out_OutPosition = Vector_IfResult7;
}

void Collision_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant188 = false;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult4 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal3;
	float4x4 TransformBase_Func_Output_OutTransform3;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant188, TransformBase_Func_Output_bUseOriginal3, TransformBase_Func_Output_OutTransform3, Context);
	float3 Result125 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult8;
	if(TransformBase_Func_Output_bUseOriginal3)
	{
	Vector_IfResult8 = In_InVector;
	}
	else
	{
	Vector_IfResult8 = Result125;
	}
	Out_OutVector = Vector_IfResult8;
}

void Collision_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant192 = false;
	float4x4 Matrix_IfResult5;
	float4x4 Matrix001_IfResult4;
	if(In_ApplyScale)
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult5 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult4 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal4;
	float4x4 TransformBase_Func_Output_OutTransform4;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult5, Matrix001_IfResult4, Constant192, TransformBase_Func_Output_bUseOriginal4, TransformBase_Func_Output_OutTransform4, Context);
	float3 Result126 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform4).xyz;
	float3 Vector_IfResult9;
	if(TransformBase_Func_Output_bUseOriginal4)
	{
	Vector_IfResult9 = In_InVector;
	}
	else
	{
	Vector_IfResult9 = Result126;
	}
	Out_OutVector = Vector_IfResult9;
}

void Collision_TransformVector004_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant199 = false;
	float4x4 Matrix_IfResult6;
	float4x4 Matrix001_IfResult5;
	if(In_ApplyScale)
	{
	Matrix_IfResult6 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult5 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult6 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult5 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal5;
	float4x4 TransformBase_Func_Output_OutTransform5;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult6, Matrix001_IfResult5, Constant199, TransformBase_Func_Output_bUseOriginal5, TransformBase_Func_Output_OutTransform5, Context);
	float3 Result127 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform5).xyz;
	float3 Vector_IfResult10;
	if(TransformBase_Func_Output_bUseOriginal5)
	{
	Vector_IfResult10 = In_InVector;
	}
	else
	{
	Vector_IfResult10 = Result127;
	}
	Out_OutVector = Vector_IfResult10;
}

void Collision_TransformPosition002_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant202 = false;
	float4x4 Matrix_IfResult7;
	float4x4 Matrix001_IfResult6;
	if(In_ApplyScale)
	{
	Matrix_IfResult7 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult6 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult7 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult6 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal6;
	float4x4 TransformBase_Func_Output_OutTransform6;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult7, Matrix001_IfResult6, Constant202, TransformBase_Func_Output_bUseOriginal6, TransformBase_Func_Output_OutTransform6, Context);
	float3 Result128 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform6).xyz;
	float3 Vector_IfResult11;
	if(TransformBase_Func_Output_bUseOriginal6)
	{
	Vector_IfResult11 = In_InPosition;
	}
	else
	{
	Vector_IfResult11 = Result128;
	}
	Out_OutPosition = Vector_IfResult11;
}

void PlaneSphereCollisionDetection_Func_(float3 In_PlaneNormal, float3 In_PlanePivotPoint, float3 In_InitialSphereLocation, float3 In_SpherePositionDelta, float In_CollisionRadius, float In_PhysicsDeltaTime, float In_MaxCorrectiondistance, out bool Out_Collides, out float3 Out_IntersectionLocation, out float3 Out_PreASC45IntersectionSphereCenterLocation, out float3 Out_InitialPositionRelativeCollisionLocation, out float Out_TimeElapsedToCollision, out float Out_RemainingTimePostCollision, out float Out_PercentageofTimeUsedToPerformCollision, out float Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, out float Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, inout FSimulationContext Context)
{
	float3 Result140 = -(In_PlaneNormal);
	float3 Result141 = In_PlanePivotPoint - In_InitialSphereLocation;
	float Result142 = dot(Result140,Result141);
	float Result143 = Result142 - In_CollisionRadius;
	float Constant231 = 0;
	bool Result144 = NiagaraAll(Result143 < Constant231);
	bool Constant232 = true;
	float3 Result145 = Result140 * Result142;
	float3 Result146 = Result145 + In_InitialSphereLocation;
	float Result147 = max(In_MaxCorrectiondistance, Result143);
	float3 Result148 = Result147 * Result140;
	float3 Result149 = Result148 + In_InitialSphereLocation;
	float Constant233 = 0;
	float Constant234 = 0;
	float3 Result150 = In_InitialSphereLocation + In_SpherePositionDelta;
	float3 Result151 = In_PlanePivotPoint - Result150;
	float Result152 = dot(Result140,Result151);
	float Result153 = Result152 - In_CollisionRadius;
	float Constant235 = 0;
	bool Result154 = NiagaraAll(Result153 <= Constant235);
	float Result155 = abs(Result153);
	float Result156 = Result143 - Result153;
	float Result157 = abs(Result156);
	float Constant236 = 1e-06;
	float Result158 = max(Result157, Constant236);
	float Result159 = Result155 / Result158;
	float Constant237 = 0;
	bool Result160 = NiagaraAll(Result159 == Constant237);
	bool Result161 = Result144 || Result160;
	float Constant238 = 1;
	float float_IfResult7;
	if(Result161)
	{
	float_IfResult7 = Constant238;
	}
	else
	{
	float_IfResult7 = Result159;
	}
	float Result162 = 1 - float_IfResult7;
	float3 Result163 = Result162 * In_SpherePositionDelta;
	float3 Result164 = In_InitialSphereLocation + Result163;
	float3 Result165 = Result140 * In_CollisionRadius;
	float3 Result166 = Result164 + Result165;
	float3 Result167 = Result166 - Result164;
	float Result168 = In_PhysicsDeltaTime * Result162;
	float Result169 = In_PhysicsDeltaTime * float_IfResult7;
	bool Collides_IfResult;
	float3 IntersectionLocation_IfResult;
	float3 PreASC45IntersectionSphereCenterLocation_IfResult;
	float3 InitialPositionRelativeCollisionLocation_IfResult;
	float TimeElapsedToCollision_IfResult;
	float RemainingTimePostCollision_IfResult;
	float PercentageofTimeUsedToPerformCollision_IfResult;
	float InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult;
	float UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult;
	if(Result144)
	{
	Collides_IfResult = Constant232;
	IntersectionLocation_IfResult = Result146;
	PreASC45IntersectionSphereCenterLocation_IfResult = Result149;
	InitialPositionRelativeCollisionLocation_IfResult = Result145;
	TimeElapsedToCollision_IfResult = Constant233;
	RemainingTimePostCollision_IfResult = In_PhysicsDeltaTime;
	PercentageofTimeUsedToPerformCollision_IfResult = Constant234;
	InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult = Result143;
	UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult = Result153;
	}
	else
	{
	Collides_IfResult = Result154;
	IntersectionLocation_IfResult = Result166;
	PreASC45IntersectionSphereCenterLocation_IfResult = Result164;
	InitialPositionRelativeCollisionLocation_IfResult = Result167;
	TimeElapsedToCollision_IfResult = Result168;
	RemainingTimePostCollision_IfResult = Result169;
	PercentageofTimeUsedToPerformCollision_IfResult = Result162;
	InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult = Result143;
	UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult = Result153;
	}
	Out_Collides = Collides_IfResult;
	Out_IntersectionLocation = IntersectionLocation_IfResult;
	Out_PreASC45IntersectionSphereCenterLocation = PreASC45IntersectionSphereCenterLocation_IfResult;
	Out_InitialPositionRelativeCollisionLocation = InitialPositionRelativeCollisionLocation_IfResult;
	Out_TimeElapsedToCollision = TimeElapsedToCollision_IfResult;
	Out_RemainingTimePostCollision = RemainingTimePostCollision_IfResult;
	Out_PercentageofTimeUsedToPerformCollision = PercentageofTimeUsedToPerformCollision_IfResult;
	Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision = InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult;
	Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane = UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant249 = (0);
	bool Constant250 = false;
	int Constant251 = 0;
	int Constant252 = (0);
	bool Constant253 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant249, In_OverrideSeed, Constant251, Constant252, Constant253, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3, Context);
	float2 Result185 = In_Max - In_Min;
	int Seed13;
	int Seed23;
	int Seed33;
	Seed13 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed1;
	Seed23 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed2;
	Seed33 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo3.Seed3;
	float2 Result186 = rand_float(Result185, Seed13, Seed23, Seed33);
	float2 Result187 = rand_float(Result185);
	float2 Random_IfResult3;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms3)
	{
	Random_IfResult3 = Result186;
	}
	else
	{
	Random_IfResult3 = Result187;
	}
	float2 Result188 = In_Min + Random_IfResult3;
	Out_Result = Result188;
}

void RandomizeCollisionNormals_Func_(float3 In_ConeAxis, float In_Scale, float In_Spread, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Constant243 = 0;
	float Constant244 = 1;
	float Result183 = clamp(In_Spread,Constant243,Constant244);
	float Constant245 = -1;
	float Result184 = Result183 * Constant245;
	float2 Output13;
	Output13.x = Result184;
	Output13.y = Result184;
	float2 Output14;
	Output14.x = Result183;
	Output14.y = Result183;
	int Constant246 = -1;
	int Constant247 = 0;
	bool Constant248 = false;
	float2 RandomRangeFloat_Func_Output_Result8;
	RandomRangeFloat_Func_(Output13, Output14, Constant246, Constant247, Constant248, RandomRangeFloat_Func_Output_Result8, Context);
	float X1;
	float Y1;
	X1 = RandomRangeFloat_Func_Output_Result8.x;
	Y1 = RandomRangeFloat_Func_Output_Result8.y;
	float3 Constant254 = float3(1,0,0);
	float3 Result189 = X1 * Constant254;
	float3 Constant255 = float3(0,1,0);
	float3 Result190 = Y1 * Constant255;
	float3 Result191 = Result189 + Result190;
	float Result192 = abs(X1);
	float Result193 = abs(Y1);
	float Result194 = max(Result192, Result193);
	float Result195 = 1 - Result194;
	float3 Constant256 = float3(0,0,1);
	float3 Result196 = Result195 * Constant256;
	float3 Result197 = Result191 + Result196;
	float3 Result198 = normalize(Result197);
	float3 Result199 = Result198 * In_Scale;
	float3 Constant257 = float3(0,0,1);
	float3 Constant258 = float3(0,0,1);
	float Constant259 = 1e-05;
	float Constant260 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction5;
	float DirectionAndLengthSafe_Func_Output_Length5;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold5;
	DirectionAndLengthSafe_Func_(In_ConeAxis, Constant258, Constant259, Constant260, DirectionAndLengthSafe_Func_Output_Direction5, DirectionAndLengthSafe_Func_Output_Length5, DirectionAndLengthSafe_Func_Output_BelowThreshold5, Context);
	bool Constant261 = false;
	float4 FindQuatBetween_Func_Output_NewOutput1;
	FindQuatBetween_Func_(Constant257, DirectionAndLengthSafe_Func_Output_Direction5, Constant261, FindQuatBetween_Func_Output_NewOutput1, Context);
	float3 MultiplyVectorWithQuaternion_Func_Output_Vector1;
	MultiplyVectorWithQuaternion_Func_(Result199, FindQuatBetween_Func_Output_NewOutput1, MultiplyVectorWithQuaternion_Func_Output_Vector1, Context);
	Out_Ouput = MultiplyVectorWithQuaternion_Func_Output_Vector1;
}

void ReflectVector_Func_(float3 In_InVector, float3 In_Normal, out float3 Out_Reflected, inout FSimulationContext Context)
{
	float Result200 = dot(In_InVector,In_Normal);
	float Result201 = Result200 + Result200;
	float3 Result202 = Result201 * In_Normal;
	float3 Result203 = In_InVector - Result202;
	Out_Reflected = Result203;
}

void CentimeterMeterConversion_Func_(float3 In_INPUT_VAR, out float3 Out_CentimeterstoMeters, out float3 Out_MeterstoCentimeters, inout FSimulationContext Context)
{
	float Constant262 = 0.01;
	float3 Result204 = In_INPUT_VAR * Constant262;
	float Constant263 = 100;
	float3 Result205 = In_INPUT_VAR * Constant263;
	Out_CentimeterstoMeters = Result204;
	Out_MeterstoCentimeters = Result205;
}

void ProjectVectorOnPlane_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Result209 = dot(In_VECTOR_VAR,In_Normal);
	float3 Result210 = Result209 * In_Normal;
	float3 Result211 = In_VECTOR_VAR - Result210;
	Out_Ouput = Result211;
}

void Collision_CollisionQueryAndResponse_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialDataInstanceAlive = Context.MapUpdate.DataInstance.Alive;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result129 = Context.MapUpdate.Transient.PhysicsForce / Context.MapUpdate.Particles.Mass;
	float3 Result130 = Result129 * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result131 = Result130 + Context.MapUpdate.Particles.Velocity;
	float3 Result132 = Result131 * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin = Context.MapUpdate.Particles.Position;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution = Result130;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate = Result132;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass = Result129;
	float3 Constant224 = float3(0,0,-1);
	float Constant225 = 1e-05;
	float Constant226 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction3;
	float DirectionAndLengthSafe_Func_Output_Length3;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold3;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution, Constant224, Constant225, Constant226, DirectionAndLengthSafe_Func_Output_Direction3, DirectionAndLengthSafe_Func_Output_Length3, DirectionAndLengthSafe_Func_Output_BelowThreshold3, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceVector = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceDirection = DirectionAndLengthSafe_Func_Output_Direction3;
	float3 Result133 = DirectionAndLengthSafe_Func_Output_Direction3 * Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius;
	float3 Result134 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin - Result133;
	float3 Result135 = Context.MapUpdate.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution;
	float3 Result136 = Result133 + Result135;
	float3 Constant227 = float3(0,0,-1);
	float Constant228 = 1e-05;
	float Constant229 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction4;
	float DirectionAndLengthSafe_Func_Output_Length4;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold4;
	DirectionAndLengthSafe_Func_(Result136, Constant227, Constant228, Constant229, DirectionAndLengthSafe_Func_Output_Direction4, DirectionAndLengthSafe_Func_Output_Length4, DirectionAndLengthSafe_Func_Output_BelowThreshold4, Context);
	float Result137 = min(DirectionAndLengthSafe_Func_Output_Length4, Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxTraceLength);
	float3 Result138 = DirectionAndLengthSafe_Func_Output_Direction4 * Result137;
	float3 Result139 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin + Result138;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldStart = Result134;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldEnd = Result139;
	bool Constant230 = false;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction = Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution = Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient;
	Context.MapUpdate.DataInstance.Alive = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialDataInstanceAlive;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.DepthBasedCollisionParticleOccluded = Constant230;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal = Context.MapUpdate.Collision.CollisionQueryAndResponse.AnalyticalCollisionNormal;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint = Context.MapUpdate.Collision.CollisionQueryAndResponse.AnalyticalCollisionPlanePosition;
	bool PlaneSphereCollisionDetection_Func_Output_Collides;
	float3 PlaneSphereCollisionDetection_Func_Output_IntersectionLocation;
	float3 PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation;
	float3 PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation;
	float PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision;
	float PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision;
	float PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision;
	float PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision;
	float PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane;
	PlaneSphereCollisionDetection_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin, Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate, Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius, Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime, Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance, PlaneSphereCollisionDetection_Func_Output_Collides, PlaneSphereCollisionDetection_Func_Output_IntersectionLocation, PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation, PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation, PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision, PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision, PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision, PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, Context);
	Context.MapUpdate.Transient.CollisionWorldPosition = PlaneSphereCollisionDetection_Func_Output_IntersectionLocation;
	Context.MapUpdate.Transient.CollisionParticleWorldPosition = PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation;
	Context.MapUpdate.Transient.CollisionParticleRelativeCollisionLocation = PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTickDeltaForThisCollisionUpdate = PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime = PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePercentageOfTickDedicatedToUpdatingPosition = PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance = PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision;
	Context.MapUpdate.Transient.CollisionDistanceToCollision = PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane;
	float Constant239 = 0;
	bool Result170 = NiagaraAll(Context.MapUpdate.Transient.CollisionDistanceToCollision <= Constant239);
	bool Result171 = Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled && Result170;
	bool Result172 = Result171 || Context.MapUpdate.Particles.HasCollided;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame = Result171;
	Context.MapUpdate.Particles.HasCollided = Result172;
	float3 Result173 = -(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal);
	float Result174 = dot(Result173,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate);
	float Result175 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime * Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result176 = Result175 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass;
	float Result177 = dot(Result173,Result176);
	float Result178 = Result174 - Result177;
	float Constant240 = 0.1;
	bool Result179 = NiagaraAll(Result178 < Constant240);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution = Result179;
	float3 Result180 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate / Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	float float_IfResult8;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame)
	{
	float_IfResult8 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime;
	}
	else
	{
	float_IfResult8 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime;
	}
	float Constant241 = 0;
	float float_IfResult9;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution)
	{
	float_IfResult9 = Constant241;
	}
	else
	{
	float_IfResult9 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution;
	}
	Context.MapUpdate.Transient.CollisionValid = Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame;
	Context.MapUpdate.Transient.CollisionSize = Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius;
	Context.MapUpdate.Transient.CollisionNormal = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal;
	Context.MapUpdate.Transient.CollisionVelocity = Result180;
	Context.MapUpdate.Transient.CollisionFriction = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction;
	Context.MapUpdate.Transient.PhysicsDeltaTime = float_IfResult8;
	Context.MapUpdate.Transient.CollisionRestitution = float_IfResult9;
	bool Result181 = !Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution;
	bool Result182 = Result181 && Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal;
	float Constant242 = 1;
	float3 RandomizeCollisionNormals_Func_Output_Ouput;
	RandomizeCollisionNormals_Func_(Context.MapUpdate.Transient.CollisionNormal, Constant242, Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage, RandomizeCollisionNormals_Func_Output_Ouput, Context);
	float3 Vector_IfResult12;
	if(Result182)
	{
	Vector_IfResult12 = RandomizeCollisionNormals_Func_Output_Ouput;
	}
	else
	{
	Vector_IfResult12 = Context.MapUpdate.Transient.CollisionNormal;
	}
	float3 ReflectVector_Func_Output_Reflected;
	ReflectVector_Func_(Context.MapUpdate.Transient.CollisionVelocity, Vector_IfResult12, ReflectVector_Func_Output_Reflected, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity = ReflectVector_Func_Output_Reflected;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters;
	CentimeterMeterConversion_Func_(Context.MapUpdate.Transient.CollisionVelocity, CentimeterMeterConversion_Func_Output_CentimeterstoMeters, CentimeterMeterConversion_Func_Output_MeterstoCentimeters, Context);
	float3 Result206 = Context.MapUpdate.Particles.Mass * CentimeterMeterConversion_Func_Output_CentimeterstoMeters;
	float Constant264 = -1;
	float3 Result207 = Result206 * Constant264;
	float Result208 = dot(Result207,Context.MapUpdate.Transient.CollisionNormal);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons = Result208;
	float3 ProjectVectorOnPlane_Func_Output_Ouput;
	ProjectVectorOnPlane_Func_(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity, Context.MapUpdate.Transient.CollisionNormal, ProjectVectorOnPlane_Func_Output_Ouput, Context);
	float3 Constant265 = float3(0,0,0);
	float Constant266 = 1e-05;
	float Constant267 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction6;
	float DirectionAndLengthSafe_Func_Output_Length6;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold6;
	DirectionAndLengthSafe_Func_(ProjectVectorOnPlane_Func_Output_Ouput, Constant265, Constant266, Constant267, DirectionAndLengthSafe_Func_Output_Direction6, DirectionAndLengthSafe_Func_Output_Length6, DirectionAndLengthSafe_Func_Output_BelowThreshold6, Context);
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters1;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters1;
	CentimeterMeterConversion_Func_(ProjectVectorOnPlane_Func_Output_Ouput, CentimeterMeterConversion_Func_Output_CentimeterstoMeters1, CentimeterMeterConversion_Func_Output_MeterstoCentimeters1, Context);
	float3 Result212 = CentimeterMeterConversion_Func_Output_CentimeterstoMeters1 * Context.MapUpdate.Particles.Mass;
	float float_IfResult10;
	if(Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution)
	{
	float_IfResult10 = Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient;
	}
	else
	{
	float_IfResult10 = Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction;
	}
	float3 Result213 = DirectionAndLengthSafe_Func_Output_Direction6 * float_IfResult10 * Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons;
	float3 Result214 = Result212 - Result213;
	float3 Constant268 = float3(0,0,0);
	float Constant269 = 1e-05;
	float Constant270 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction7;
	float DirectionAndLengthSafe_Func_Output_Length7;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold7;
	DirectionAndLengthSafe_Func_(Result214, Constant268, Constant269, Constant270, DirectionAndLengthSafe_Func_Output_Direction7, DirectionAndLengthSafe_Func_Output_Length7, DirectionAndLengthSafe_Func_Output_BelowThreshold7, Context);
	float Result215 = dot(DirectionAndLengthSafe_Func_Output_Direction6,DirectionAndLengthSafe_Func_Output_Direction7);
	float Constant271 = 0;
	bool Result216 = NiagaraAll(Result215 <= Constant271);
	float3 Vector_IfResult13;
	if(Result216)
	{
	Vector_IfResult13 = Result212;
	}
	else
	{
	Vector_IfResult13 = Result213;
	}
	float Constant272 = -1;
	float3 Result217 = Vector_IfResult13 * Constant272;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons = Result217;
	float3 Result218 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons / Context.MapUpdate.Particles.Mass;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters2;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters2;
	CentimeterMeterConversion_Func_(Result218, CentimeterMeterConversion_Func_Output_CentimeterstoMeters2, CentimeterMeterConversion_Func_Output_MeterstoCentimeters2, Context);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector = CentimeterMeterConversion_Func_Output_MeterstoCentimeters2;
	float3 Result219 = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity + Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector;
	float Result220 = dot(Context.MapUpdate.Transient.CollisionNormal,Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity);
	float3 Result221 = Context.MapUpdate.Transient.CollisionNormal * Result220;
	float Result222 = 1 - Context.MapUpdate.Transient.CollisionRestitution;
	float3 Result223 = Result221 * Result222;
	float3 Result224 = Result219 - Result223;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied = Result224;
	float3 Particleposition_IfResult;
	if(Context.MapUpdate.Transient.CollisionValid)
	{
	Particleposition_IfResult = Context.MapUpdate.Transient.CollisionParticleWorldPosition;
	}
	else
	{
	Particleposition_IfResult = Context.MapUpdate.Particles.Position;
	}
	Context.MapUpdate.Particles.Position = Particleposition_IfResult;
	float3 Constant273 = float3(0,0,1);
	float Constant274 = 1e-05;
	float Constant275 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction8;
	float DirectionAndLengthSafe_Func_Output_Length8;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold8;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Transient.CollisionVelocity, Constant273, Constant274, Constant275, DirectionAndLengthSafe_Func_Output_Direction8, DirectionAndLengthSafe_Func_Output_Length8, DirectionAndLengthSafe_Func_Output_BelowThreshold8, Context);
	float Result225 = dot(DirectionAndLengthSafe_Func_Output_Direction8,Context.MapUpdate.Transient.CollisionNormal);
	float Constant276 = 0;
	bool Result226 = NiagaraAll(Result225 < Constant276);
	bool Result227 = Result226 && Context.MapUpdate.Transient.CollisionValid;
	float3 Constant277 = float3(0,0,0);
	float3 physicsforce_IfResult;
	float3 Velocity_IfResult;
	if(Result227)
	{
	physicsforce_IfResult = Constant277;
	Velocity_IfResult = Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied;
	}
	else
	{
	physicsforce_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Velocity_IfResult = Context.MapUpdate.Particles.Velocity;
	}
	Context.MapUpdate.Transient.PhysicsForce = physicsforce_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
}

void Collision_TransformPosition001_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant298 = false;
	float4x4 Matrix_IfResult8;
	float4x4 Matrix001_IfResult7;
	if(In_ApplyScale)
	{
	Matrix_IfResult8 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult7 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult8 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult7 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal7;
	float4x4 TransformBase_Func_Output_OutTransform7;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult8, Matrix001_IfResult7, Constant298, TransformBase_Func_Output_bUseOriginal7, TransformBase_Func_Output_OutTransform7, Context);
	float3 Result251 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform7).xyz;
	float3 Vector_IfResult16;
	if(TransformBase_Func_Output_bUseOriginal7)
	{
	Vector_IfResult16 = In_InPosition;
	}
	else
	{
	Vector_IfResult16 = Result251;
	}
	Out_OutPosition = Vector_IfResult16;
}

void Collision_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant302 = false;
	float4x4 Matrix_IfResult9;
	float4x4 Matrix001_IfResult8;
	if(In_ApplyScale)
	{
	Matrix_IfResult9 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult8 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult9 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult8 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal8;
	float4x4 TransformBase_Func_Output_OutTransform8;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult9, Matrix001_IfResult8, Constant302, TransformBase_Func_Output_bUseOriginal8, TransformBase_Func_Output_OutTransform8, Context);
	float3 Result252 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform8).xyz;
	float3 Vector_IfResult17;
	if(TransformBase_Func_Output_bUseOriginal8)
	{
	Vector_IfResult17 = In_InVector;
	}
	else
	{
	Vector_IfResult17 = Result252;
	}
	Out_OutVector = Vector_IfResult17;
}

void Collision_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant306 = false;
	float4x4 Matrix_IfResult10;
	float4x4 Matrix001_IfResult9;
	if(In_ApplyScale)
	{
	Matrix_IfResult10 = Context.MapUpdate.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult9 = Context.MapUpdate.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult10 = Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult9 = Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal9;
	float4x4 TransformBase_Func_Output_OutTransform9;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult10, Matrix001_IfResult9, Constant306, TransformBase_Func_Output_bUseOriginal9, TransformBase_Func_Output_OutTransform9, Context);
	float3 Result253 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform9).xyz;
	float3 Vector_IfResult18;
	if(TransformBase_Func_Output_bUseOriginal9)
	{
	Vector_IfResult18 = In_InVector;
	}
	else
	{
	Vector_IfResult18 = Result253;
	}
	Out_OutVector = Vector_IfResult18;
}

void Collision_Emitter_Func_(inout FSimulationContext Context)
{
	float CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_Output_Radius;
	CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_(Context.MapUpdate.Particles.SpriteSize, CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_Output_Radius, Context);
	float Result123 = Context.MapUpdate.Constants.Emitter.Collision.ParticleRadiusScale * CalculateRadiusFromSpriteSize_Method_NewEnumerator0_Func_Output_Radius;
	Context.MapUpdate.Local.Collision.ModuleParticleRadius = Result123;
	int Constant181 = 0;
	int Constant182 = 1;
	bool Constant183 = false;
	float3 Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition_Emitter_Func_(Context.MapUpdate.Particles.Position, Constant181, Constant182, Constant183, Collision_TransformPosition_Emitter_Func_Output_OutPosition, Context);
	int Constant185 = 0;
	int Constant186 = 1;
	bool Constant187 = false;
	float3 Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Collision_TransformVector002_Emitter_Func_(Context.MapUpdate.Transient.PhysicsForce, Constant185, Constant186, Constant187, Collision_TransformVector002_Emitter_Func_Output_OutVector, Context);
	int Constant189 = 0;
	int Constant190 = 1;
	bool Constant191 = false;
	float3 Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Collision_TransformVector003_Emitter_Func_(Context.MapUpdate.Particles.Velocity, Constant189, Constant190, Constant191, Collision_TransformVector003_Emitter_Func_Output_OutVector, Context);
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousPosition = Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousForce = Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousVelocity = Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Particles.Position = Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.Transient.PhysicsForce = Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Particles.Velocity = Collision_TransformVector003_Emitter_Func_Output_OutVector;
	float Constant193 = -999999;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.Friction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.Friction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.StaticFriction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionCoefficient = Context.MapUpdate.Constants.Emitter.Collision.StaticFriction;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionEngagementSpeed = Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.StaticFrictionEngagementSpeed = Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius = Context.MapUpdate.Local.Collision.ModuleParticleRadius;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRadius = Context.MapUpdate.Local.Collision.ModuleParticleRadius;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient = Context.MapUpdate.Constants.Emitter.Collision.Restitution;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient = Context.MapUpdate.Constants.Emitter.Collision.Restitution;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage = Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage = Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled = Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.CollisionEnabled = Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal = Context.MapUpdate.Collision.RandomizeCollisionNormalVector;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal = Context.MapUpdate.Collision.RandomizeCollisionNormalVector;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.UpdateRotationalVelocity = Context.MapUpdate.Local.Collision.UpdateMeshRotation;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.UpdateRotationalVelocity = Context.MapUpdate.Local.Collision.UpdateMeshRotation;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.BounceCollisionFriction = Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction = Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance = Constant193;
	Context.MapUpdate.Collision.CollisionQueryAndResponse001.MaxIntersectionCorrectionDistance = Constant193;
	float3 Constant194 = float3(0,0,1);
	float Constant195 = 1e-05;
	float Constant196 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.Constants.Emitter.Collision.AnalyticalCollisionNormal1, Constant194, Constant195, Constant196, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	int Constant197 = 1;
	bool Constant198 = false;
	float3 Collision_TransformVector004_Emitter_Func_Output_OutVector;
	Collision_TransformVector004_Emitter_Func_(DirectionAndLengthSafe_Func_Output_Direction2, Context.MapUpdate.Collision.AnalyticalCollisionPlaneSpace, Constant197, Constant198, Collision_TransformVector004_Emitter_Func_Output_OutVector, Context);
	int Constant200 = 1;
	bool Constant201 = false;
	float3 Collision_TransformPosition002_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition002_Emitter_Func_(Context.MapUpdate.Constants.Emitter.Collision.AnalyticalCollisionPlanePosition1, Context.MapUpdate.Collision.AnalyticalCollisionPlaneSpace, Constant200, Constant201, Collision_TransformPosition002_Emitter_Func_Output_OutPosition, Context);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.AnalyticalCollisionNormal = Collision_TransformVector004_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.AnalyticalCollisionPlanePosition = Collision_TransformPosition002_Emitter_Func_Output_OutPosition;
	bool Constant203 = (false);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialDataInstanceAlive = Constant203;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float3 Constant204 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin = Constant204;
	float3 Constant205 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution = Constant205;
	float3 Constant206 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate = Constant206;
	float3 Constant207 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass = Constant207;
	float Constant208 = 1;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier = Constant208;
	float Constant209 = 1e+10;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxTraceLength = Constant209;
	float Constant210 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction = Constant210;
	float Constant211 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution = Constant211;
	float3 Constant212 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal = Constant212;
	float3 Constant213 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint = Constant213;
	float Constant214 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime = Constant214;
	float Constant215 = (0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance = Constant215;
	bool Constant216 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame = Constant216;
	bool Constant217 = false;
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution = Constant217;
	float3 Constant218 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity = Constant218;
	float Constant219 = (0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons = Constant219;
	int Constant220 = 0;
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CPUFrictionMergeType = Constant220;
	float3 Constant221 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons = Constant221;
	float3 Constant222 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector = Constant222;
	float3 Constant223 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied = Constant223;
	Collision_CollisionQueryAndResponse_Emitter_Func_(Context);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Valid = Context.MapUpdate.Transient.CollisionValid;
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Normal = Context.MapUpdate.Transient.CollisionNormal;
	bool Constant278 = false;
	Context.MapUpdate.Transient.CollisionValid = Constant278;
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Valid = Context.MapUpdate.Transient.CollisionValid;
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Normal = Context.MapUpdate.Transient.CollisionNormal;
	bool Result228 = Context.MapUpdate.Transient.CollisionValid || Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Valid;
	int Constant279 = 1;
	int Result229 = Context.MapUpdate.Particles.NumberOfCollisions + Constant279;
	int int32_IfResult;
	if(Result228)
	{
	int32_IfResult = Result229;
	}
	else
	{
	int32_IfResult = Context.MapUpdate.Particles.NumberOfCollisions;
	}
	Context.MapUpdate.Transient.CollisionValid = Result228;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionValid = Result228;
	Context.MapUpdate.Particles.NumberOfCollisions = int32_IfResult;
	float Constant280 = 0;
	bool Result230 = NiagaraAll(Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance < Constant280);
	float Constant281 = 0;
	bool Result231 = NiagaraAll(Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance < Constant281);
	bool Result232 = Result230 && Result231;
	float PenetrationFixed1;
	float PenetrationFixed2;
	PenetrationFixed1 = Result230;
	PenetrationFixed2 = Result231;
	float Result233 = PenetrationFixed1 + PenetrationFixed2;
	float Constant282 = 0.5;
	float Result234 = Result233 * Constant282;
	float Result235 = Context.MapUpdate.Engine.DeltaTime * Context.MapUpdate.Constants.Emitter.Collision.RestStateTimeRange;
	float Result236 = lerp(Context.MapUpdate.Particles.RestCounter,Result234,Result235);
	bool Result237 = NiagaraAll(Result236 > Context.MapUpdate.Constants.Emitter.Collision.PercentageofPenetrationBeforeRest);
	float Constant283 = -1;
	float Result238 = Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance * Constant283;
	bool Result239 = NiagaraAll(Result238 > Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance);
	float Constant284 = -1;
	float Result240 = Context.MapUpdate.Constants.Emitter.Collision.MaximumPenetrationCorrectionDistance * Constant284;
	bool Result241 = NiagaraAll(Result240 > Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance);
	bool Result242 = Result239 || Result241;
	bool Result243 = Result232 || Result237 || Result242;
	float3 Constant285 = float3(0,0,0);
	float3 Vector_IfResult14;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Valid)
	{
	Vector_IfResult14 = Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Normal;
	}
	else
	{
	Vector_IfResult14 = Constant285;
	}
	float3 Constant286 = float3(0,0,0);
	float3 Vector_IfResult15;
	if(Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Valid)
	{
	Vector_IfResult15 = Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Normal;
	}
	else
	{
	Vector_IfResult15 = Constant286;
	}
	float3 Result244 = Vector_IfResult14 + Vector_IfResult15;
	float3 Constant287 = float3(0,0,1);
	float Constant288 = 1e-05;
	float Constant289 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction9;
	float DirectionAndLengthSafe_Func_Output_Length9;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold9;
	DirectionAndLengthSafe_Func_(Result244, Constant287, Constant288, Constant289, DirectionAndLengthSafe_Func_Output_Direction9, DirectionAndLengthSafe_Func_Output_Length9, DirectionAndLengthSafe_Func_Output_BelowThreshold9, Context);
	float Result245 = dot(DirectionAndLengthSafe_Func_Output_Direction9,Context.MapUpdate.Constants.Emitter.Collision.ValidCollisionPlaneNormalForRest);
	float Constant290 = 0.5;
	float Result246 = Context.MapUpdate.Constants.Emitter.Collision.MinimumCollisionNormalASC47RestNormalAlignmentPercentage - Constant290;
	float Constant291 = 2;
	float Result247 = Result246 * Constant291;
	bool Result248 = NiagaraAll(Result245 > Result247);
	bool Result249 = Result243 && Result248;
	bool bool_IfResult1;
	if(Context.MapUpdate.Collision.ControlRestStateViaSurfaceNormal)
	{
	bool_IfResult1 = Result249;
	}
	else
	{
	bool_IfResult1 = Result243;
	}
	bool Result250 = Context.MapUpdate.Collision.EnableRestState && bool_IfResult1 && Context.MapUpdate.Collision.CollisionEnabled;
	float3 Constant292 = float3(0,0,0);
	float3 Constant293 = float3(0,0,0);
	float3 Constant294 = float3(0,0,0);
	float3 Position_IfResult;
	float3 Velocity_IfResult1;
	float3 Force_IfResult;
	float deltatime_IfResult;
	if(Context.MapUpdate.Transient.CollisionValid)
	{
	Position_IfResult = Context.MapUpdate.Particles.Position;
	Velocity_IfResult1 = Context.MapUpdate.Particles.Velocity;
	Force_IfResult = Constant294;
	deltatime_IfResult = Context.MapUpdate.Transient.PhysicsDeltaTime;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousPosition;
	Velocity_IfResult1 = Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousVelocity;
	Force_IfResult = Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousForce;
	deltatime_IfResult = Context.MapUpdate.Engine.DeltaTime;
	}
	float3 Position_IfResult1;
	float3 Velocity_IfResult2;
	float3 Force_IfResult1;
	float deltatime_IfResult1;
	if(Result250)
	{
	Position_IfResult1 = Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousPosition;
	Velocity_IfResult2 = Constant292;
	Force_IfResult1 = Constant293;
	deltatime_IfResult1 = deltatime_IfResult;
	}
	else
	{
	Position_IfResult1 = Position_IfResult;
	Velocity_IfResult2 = Velocity_IfResult1;
	Force_IfResult1 = Force_IfResult;
	deltatime_IfResult1 = deltatime_IfResult;
	}
	int Constant295 = 1;
	int Constant296 = 0;
	bool Constant297 = false;
	float3 Collision_TransformPosition001_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition001_Emitter_Func_(Position_IfResult1, Constant295, Constant296, Constant297, Collision_TransformPosition001_Emitter_Func_Output_OutPosition, Context);
	int Constant299 = 1;
	int Constant300 = 0;
	bool Constant301 = false;
	float3 Collision_TransformVector001_Emitter_Func_Output_OutVector;
	Collision_TransformVector001_Emitter_Func_(Velocity_IfResult2, Constant299, Constant300, Constant301, Collision_TransformVector001_Emitter_Func_Output_OutVector, Context);
	int Constant303 = 1;
	int Constant304 = 0;
	bool Constant305 = false;
	float3 Collision_TransformVector_Emitter_Func_Output_OutVector;
	Collision_TransformVector_Emitter_Func_(Force_IfResult1, Constant303, Constant304, Constant305, Collision_TransformVector_Emitter_Func_Output_OutVector, Context);
	bool Result254 = Result237 && Context.MapUpdate.Collision.CollisionEnabled;
	Context.MapUpdate.Particles.Position = Collision_TransformPosition001_Emitter_Func_Output_OutPosition;
	Context.MapUpdate.Particles.Velocity = Collision_TransformVector001_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Transient.PhysicsForce = Collision_TransformVector_Emitter_Func_Output_OutVector;
	Context.MapUpdate.Transient.PhysicsDeltaTime = deltatime_IfResult1;
	Context.MapUpdate.Transient.CollisionIsResting = Result254;
	Context.MapUpdate.Particles.RestCounter = Result236;
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCombinedCollisionNormal = DirectionAndLengthSafe_Func_Output_Direction9;
	Context.MapUpdate.Collision.AdvancedAgingRate = Context.MapUpdate.Constants.Emitter.Collision.AdvancedAgingRate;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant313 = 0.0001;
	float Result255 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant313);
	float Result256 = Reciprocal(Result255);
	float3 Result257 = Result256 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result257;
	float3 Result258 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant314 = 0;
	float Result259 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant314);
	float Result260 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result259;
	float Constant315 = 1;
	float Result261 = Result260 + Constant315;
	float3 Result262 = Result258 / Result261;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result262;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result263 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result263;
	float3 Position_IfResult2;
	float3 Velocity_IfResult3;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult2 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult3 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult2 = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult3 = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult2;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult3;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant316 = float3(0,0,0);
	float Constant317 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant316;
	Drag_IfResult = Constant317;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void ScaleSpriteSize_Emitter_Func_(inout FSimulationContext Context)
{
	float2 Result264 = Context.MapUpdate.Constants.Emitter.ScaleSpriteSize.ScaleFactor * Context.MapUpdate.Transient.SpriteSizeScaleFactor;
	float2 Result265 = Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize * Result264;
	Context.MapUpdate.Particles.SpriteSize = Result265;
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Result264;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float3 Constant7 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant7;
	float Constant8 = 0;
	Context.MapSpawn.Particles.Age = Constant8;
	float Constant9 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant9;
	bool Constant10 = false;
	Context.MapSpawn.Particles.HasCollided = Constant10;
	int Constant11 = 0;
	Context.MapSpawn.Particles.NumberOfCollisions = Constant11;
	float Constant12 = 0;
	Context.MapSpawn.Particles.RestCounter = Constant12;

	bool Constant13 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideRandomness = Constant13;
	int Constant14 = 0;
	Context.MapSpawn.UniformRangedFloat004.RandomnessMode = Constant14;
	bool Constant15 = false;
	Context.MapSpawn.UniformRangedFloat004.OverrideSeed = Constant15;
	bool Constant16 = false;
	Context.MapSpawn.UniformRangedFloat004.FixedRandomSeed = Constant16;
	float UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat004_Emitter_Func_(UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant31 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideRandomness = Constant31;
	int Constant32 = 0;
	Context.MapSpawn.UniformRangedFloat005.RandomnessMode = Constant32;
	bool Constant33 = false;
	Context.MapSpawn.UniformRangedFloat005.OverrideSeed = Constant33;
	bool Constant34 = false;
	Context.MapSpawn.UniformRangedFloat005.FixedRandomSeed = Constant34;
	float UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat005_Emitter_Func_(UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat, Context);
	bool Constant37 = true;
	bool Constant38 = false;
	bool Constant39 = false;
	float3 ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	ParticleOwnerPosition_Emitter_Func_(ParticleOwnerPosition_Emitter_Func_Output_OutPosition, Context);
	bool Constant42 = true;
	Context.MapSpawn.InitializeParticle.Lifetime = UniformRangedFloat004_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.Mass = UniformRangedFloat005_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant37;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant38;
	Context.MapSpawn.InitializeParticle.Position = ParticleOwnerPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant42;
	bool Constant43 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant43;
	bool Constant44 = true;
	Context.MapSpawn.InitializeParticle.WriteMass = Constant44;
	bool Constant45 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant45;
	bool Constant46 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant46;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant49 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant49;
	float Constant50 = 0;
	float Constant51 = 1;
	int Constant52 = -1;
	int Constant53 = 0;
	bool Constant54 = false;
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Constant50, Constant51, Constant52, Constant53, Constant54, RandomRangeFloat_Func_Output_Result2, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result2;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant60 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = Constant60;
	float Constant61 = (0.0);
	Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis = Constant61;
	int Constant62 = 2;
	Context.MapSpawn.AddVelocityInCone.ConeAxisCoordinateSpace = Constant62;
	bool Constant63 = false;
	Context.MapSpawn.AddVelocityInCone.UseVelocityFalloffOnConeAxis = Constant63;
	EnterStatScope(2 );
	AddVelocityInCone_Emitter_Func_(Context);
	ExitStatScope( );
	int Constant110 = 2;
	Context.MapSpawn.AddVelocityFromPoint.OriginOffsetCoordinateSpace = Constant110;
	float3 AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	AddVelocityFromPoint_SimulationPosition_Emitter_Func_(AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.AddVelocityFromPoint.VelocityOrigin = AddVelocityFromPoint_SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.AddVelocityFromPoint.DefaultPosition = Context.MapSpawn.Particles.Position;
	bool Constant113 = true;
	Context.MapSpawn.AddVelocityFromPoint.InvertVelocityFalloff = Constant113;
	bool Constant114 = false;
	Context.MapSpawn.AddVelocityFromPoint.UseFalloffDistance = Constant114;
	EnterStatScope(3 );
	AddVelocityFromPoint_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Initial.Color = Context.MapSpawn.Particles.Color;

	Context.MapSpawn.Particles.Initial.SpriteSize = Context.MapSpawn.Particles.SpriteSize;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant137 = true;
	Context.MapUpdate.DataInstance.Alive = Constant137;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(4 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	float3 Constant141 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant141;
	EnterStatScope(5 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant142 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant142;
	float Constant143 = 0;
	Context.MapUpdate.Transient.PhysicsRotationalDrag = Constant143;
	EnterStatScope(6 );
	Drag_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve_Emitter_Func_Output_Value;
	FloatFromCurve_Emitter_Func_(FloatFromCurve_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleColor.ScaleAlpha = FloatFromCurve_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleColor.ColorValueToScale = Context.MapUpdate.Particles.Initial.Color;
	float4 Constant144 = float4(1,1,1,1);
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Constant144;
	EnterStatScope(7 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant145 = (0.0);
	Context.MapUpdate.Local.Collision.ModuleParticleRadius = Constant145;
	bool Constant146 = false;
	float3 Constant147 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousPosition = Constant147;
	float3 Constant148 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousForce = Constant148;
	float3 Constant149 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.TempPreviousVelocity = Constant149;
	bool Constant150 = true;
	Context.MapUpdate.Collision.CollisionEnabled = Constant150;
	bool Constant151 = false;
	Context.MapUpdate.Collision.RandomizeCollisionNormalVector = Constant151;
	bool Constant152 = false;
	Context.MapUpdate.Local.Collision.UpdateMeshRotation = Constant152;
	float Constant153 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient = Constant153;
	float Constant154 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionCoefficient = Constant154;
	float Constant155 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.StaticFrictionEngagementSpeed = Constant155;
	float Constant156 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRadius = Constant156;
	float Constant157 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient = Constant157;
	float Constant158 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage = Constant158;
	bool Constant159 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.CollisionEnabled = Constant159;
	bool Constant160 = (false);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal = Constant160;
	float Constant161 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.BounceCollisionFriction = Constant161;
	float Constant162 = (0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance = Constant162;
	int Constant163 = 0;
	Context.MapUpdate.Collision.AnalyticalCollisionPlaneSpace = Constant163;
	float3 Constant164 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.AnalyticalCollisionNormal = Constant164;
	float3 Constant165 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Collision.CollisionQueryAndResponse.AnalyticalCollisionPlanePosition = Constant165;
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	float3 Constant166 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Transient.CollisionParticleWorldPosition = Constant166;
	float Constant167 = (0.0);
	Context.MapUpdate.Transient.CollisionDistanceToCollision = Constant167;
	bool Constant168 = (false);
	Context.MapUpdate.Transient.CollisionValid = Constant168;
	float3 Constant169 = float3(0,0,0);
	Context.MapUpdate.Transient.CollisionNormal = Constant169;
	float3 Constant170 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Transient.CollisionVelocity = Constant170;
	float Constant171 = (0.0);
	Context.MapUpdate.Transient.CollisionFriction = Constant171;
	float Constant172 = (0.0);
	Context.MapUpdate.Transient.CollisionRestitution = Constant172;
	bool Constant173 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Valid = Constant173;
	float3 Constant174 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision1Normal = Constant174;
	bool Constant175 = (false);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Valid = Constant175;
	float3 Constant176 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.Collision.ModuleCollision2Normal = Constant176;
	bool Constant177 = true;
	Context.MapUpdate.Collision.EnableRestState = Constant177;
	float Constant178 = 0;
	Context.MapUpdate.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance = Constant178;
	bool Constant179 = false;
	Context.MapUpdate.Collision.ControlRestStateViaSurfaceNormal = Constant179;
	EnterStatScope(8 );
	Collision_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant307 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant307;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant308 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant308;
	float3 Constant309 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant309;
	float Constant310 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant310;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant311 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant311;
	bool Constant312 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant312;
	EnterStatScope(9 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.ScaleSpriteSize.InitialSpriteSize = Context.MapUpdate.Particles.Initial.SpriteSize;
	float2 Constant318 = float2(1,1);
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Constant318;
	EnterStatScope(10 );
	ScaleSpriteSize_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(11 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.HasCollided = false;
	Context.MapSpawn.Particles.Initial.Color.r = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.g = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.b = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.NumberOfCollisions = 0;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.RestCounter = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Minimum = Constants_Emitter_UniformRangedFloat004_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.Maximum = Constants_Emitter_UniformRangedFloat004_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat004.RandomSeed = Constants_Emitter_UniformRangedFloat004_RandomSeed;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Minimum = Constants_Emitter_UniformRangedFloat005_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.Maximum = Constants_Emitter_UniformRangedFloat005_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat005.RandomSeed = Constants_Emitter_UniformRangedFloat005_RandomSeed;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteSize = Constants_Emitter_InitializeParticle_SpriteSize;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAngle = Constants_Emitter_AddVelocityInCone_ConeAngle;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityDistributionAlongConeAxis = Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAxis = Constants_Emitter_AddVelocityInCone_ConeAxis;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityStrength = Constants_Emitter_AddVelocityInCone_VelocityStrength;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityFalloffAwayFromConeAxis = Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.OriginOffset = Constants_Emitter_AddVelocityFromPoint_OriginOffset;
	Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.VelocityFalloffDistance = Constants_Emitter_AddVelocityFromPoint_VelocityFalloffDistance;
	Context.MapSpawn.Constants.Emitter.AddVelocityFromPoint.VelocityStrength = Constants_Emitter_AddVelocityFromPoint_VelocityStrength;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.GravityForce.Gravity = Constants_Emitter_GravityForce_Gravity;
	Context.MapUpdate.Constants.Emitter.Drag.Drag = Constants_Emitter_Drag_Drag;
	Context.MapUpdate.Constants.Emitter.Drag.RotationalDrag = Constants_Emitter_Drag_RotationalDrag;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve.ScaleCurve = Constants_Emitter_FloatFromCurve_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.MapUpdate.Constants.Emitter.Collision.ParticleRadiusScale = Constants_Emitter_Collision_ParticleRadiusScale;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapUpdate.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapUpdate.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapUpdate.Constants.Emitter.Collision.Friction = Constants_Emitter_Collision_Friction;
	Context.MapUpdate.Constants.Emitter.Collision.StaticFriction = Constants_Emitter_Collision_StaticFriction;
	Context.MapUpdate.Constants.Emitter.Collision.StaticFrictionEngagementSpeed = Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	Context.MapUpdate.Constants.Emitter.Collision.Restitution = Constants_Emitter_Collision_Restitution;
	Context.MapUpdate.Constants.Emitter.Collision.RandomizeCollisionNormal = Constants_Emitter_Collision_RandomizeCollisionNormal;
	Context.MapUpdate.Constants.Emitter.Collision.FrictionDuringaBounce = Constants_Emitter_Collision_FrictionDuringaBounce;
	Context.MapUpdate.Constants.Emitter.Collision.AnalyticalCollisionNormal1 = Constants_Emitter_Collision_AnalyticalCollisionNormal1;
	Context.MapUpdate.Constants.Emitter.Collision.AnalyticalCollisionPlanePosition1 = Constants_Emitter_Collision_AnalyticalCollisionPlanePosition1;
	Context.MapUpdate.Constants.Emitter.Collision.PercentageofPenetrationBeforeRest = Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	Context.MapUpdate.Constants.Emitter.Collision.RestStateTimeRange = Constants_Emitter_Collision_RestStateTimeRange;
	Context.MapUpdate.Constants.Emitter.Collision.MaximumPenetrationCorrectionDistance = Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	Context.MapUpdate.Constants.Emitter.Collision.ValidCollisionPlaneNormalForRest = Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	Context.MapUpdate.Constants.Emitter.Collision.MinimumCollisionNormalASC47RestNormalAlignmentPercentage = Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	Context.MapUpdate.Constants.Emitter.Collision.AdvancedAgingRate = Constants_Emitter_Collision_AdvancedAgingRate;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Constants.Emitter.ScaleSpriteSize.ScaleFactor = Constants_Emitter_ScaleSpriteSize_ScaleFactor;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataBool(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.HasCollided);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.r);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.g);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.b);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.a);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.x);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.y);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataInt(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.NumberOfCollisions);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.RestCounter);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
